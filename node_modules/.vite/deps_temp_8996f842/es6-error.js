import {
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/es6-error/es6/index.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck, "_classCallCheck");
function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
__name(_possibleConstructorReturn, "_possibleConstructorReturn");
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
__name(_inherits, "_inherits");
function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    cls.apply(this, arguments);
  }
  __name(ExtendableBuiltin, "ExtendableBuiltin");
  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }
  return ExtendableBuiltin;
}
__name(_extendableBuiltin, "_extendableBuiltin");
var ExtendableError = function(_extendableBuiltin2) {
  _inherits(ExtendableError2, _extendableBuiltin2);
  function ExtendableError2() {
    var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    _classCallCheck(this, ExtendableError2);
    var _this = _possibleConstructorReturn(this, (ExtendableError2.__proto__ || Object.getPrototypeOf(ExtendableError2)).call(this, message));
    Object.defineProperty(_this, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(_this, "name", {
      configurable: true,
      enumerable: false,
      value: _this.constructor.name,
      writable: true
    });
    if (Error.hasOwnProperty("captureStackTrace")) {
      Error.captureStackTrace(_this, _this.constructor);
      return _possibleConstructorReturn(_this);
    }
    Object.defineProperty(_this, "stack", {
      configurable: true,
      enumerable: false,
      value: new Error(message).stack,
      writable: true
    });
    return _this;
  }
  __name(ExtendableError2, "ExtendableError");
  return ExtendableError2;
}(_extendableBuiltin(Error));
var es6_default = ExtendableError;
export {
  es6_default as default
};
//# sourceMappingURL=es6-error.js.map
