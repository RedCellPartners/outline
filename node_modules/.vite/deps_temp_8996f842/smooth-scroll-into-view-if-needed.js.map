{
  "version": 3,
  "sources": ["../../scroll-into-view-if-needed/node_modules/compute-scroll-into-view/src/index.ts", "../../scroll-into-view-if-needed/es/index.js", "../../smooth-scroll-into-view-if-needed/es/index.js"],
  "sourcesContent": ["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = (window as unknown) as Window & {\n    visualViewport: visualViewport\n  }\n\n  const {\n    scrollMode,\n    block,\n    inline,\n    boundary,\n    skipOverflowHiddenElements,\n  } = options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = cursor.parentElement\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const {\n      height,\n      width,\n      top,\n      right,\n      bottom,\n      left,\n    } = frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll,\n          frame.scrollHeight - height + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll,\n          frame.scrollWidth - width + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n", "import compute from 'compute-scroll-into-view';\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var targetIsDetached = !target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(targetIsDetached ? [] : compute(target, options));\n  }\n\n  if (targetIsDetached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\n\nexport default scrollIntoView;", "import scrollIntoView from 'scroll-into-view-if-needed';\nvar memoizedNow;\n\nvar now = function now() {\n  if (!memoizedNow) {\n    memoizedNow = 'performance' in window ? performance.now.bind(performance) : Date.now;\n  }\n\n  return memoizedNow();\n};\n\nfunction step(context) {\n  var time = now();\n  var elapsed = Math.min((time - context.startTime) / context.duration, 1);\n  var value = context.ease(elapsed);\n  var currentX = context.startX + (context.x - context.startX) * value;\n  var currentY = context.startY + (context.y - context.startY) * value;\n  context.method(currentX, currentY);\n\n  if (currentX !== context.x || currentY !== context.y) {\n    requestAnimationFrame(function () {\n      return step(context);\n    });\n  } else {\n    context.cb();\n  }\n}\n\nfunction smoothScroll(el, x, y, duration, ease, cb) {\n  if (duration === void 0) {\n    duration = 600;\n  }\n\n  if (ease === void 0) {\n    ease = function ease(t) {\n      return 1 + --t * t * t * t * t;\n    };\n  }\n\n  var scrollable;\n  var startX;\n  var startY;\n  var method;\n  scrollable = el;\n  startX = el.scrollLeft;\n  startY = el.scrollTop;\n\n  method = function method(x, y) {\n    el.scrollLeft = Math.ceil(x);\n    el.scrollTop = Math.ceil(y);\n  };\n\n  step({\n    scrollable: scrollable,\n    method: method,\n    startTime: now(),\n    startX: startX,\n    startY: startY,\n    x: x,\n    y: y,\n    duration: duration,\n    ease: ease,\n    cb: cb\n  });\n}\n\nvar shouldSmoothScroll = function shouldSmoothScroll(options) {\n  return options && !options.behavior || options.behavior === 'smooth';\n};\n\nfunction scroll(target, options) {\n  var overrides = options || {};\n\n  if (shouldSmoothScroll(overrides)) {\n    return scrollIntoView(target, {\n      block: overrides.block,\n      inline: overrides.inline,\n      scrollMode: overrides.scrollMode,\n      boundary: overrides.boundary,\n      behavior: function behavior(actions) {\n        return Promise.all(actions.reduce(function (results, _ref) {\n          var el = _ref.el,\n              left = _ref.left,\n              top = _ref.top;\n          var startLeft = el.scrollLeft;\n          var startTop = el.scrollTop;\n\n          if (startLeft === left && startTop === top) {\n            return results;\n          }\n\n          return [].concat(results, [new Promise(function (resolve) {\n            return smoothScroll(el, left, top, overrides.duration, overrides.ease, function () {\n              return resolve({\n                el: el,\n                left: [startLeft, left],\n                top: [startTop, top]\n              });\n            });\n          })]);\n        }, []));\n      }\n    });\n  }\n\n  return Promise.resolve(scrollIntoView(target, options));\n}\n\nvar smoothScrollIntoView = scroll;\nexport default smoothScrollIntoView;"],
  "mappings": "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",
  "names": ["isElement", "el", "nodeType", "canOverflow", "overflow", "skipOverflowHiddenElements", "isScrollable", "clientHeight", "scrollHeight", "clientWidth", "scrollWidth", "style", "getComputedStyle", "overflowY", "overflowX", "frame", "ownerDocument", "defaultView", "frameElement", "e", "alignNearest", "scrollingEdgeStart", "scrollingEdgeEnd", "scrollingSize", "scrollingBorderStart", "scrollingBorderEnd", "elementEdgeStart", "elementEdgeEnd", "elementSize", "target", "options", "windowWithViewport", "window", "scrollMode", "block", "inline", "boundary", "checkBoundary", "node", "TypeError", "scrollingElement", "document", "documentElement", "frames", "cursor", "parentElement", "push", "body", "viewportWidth", "visualViewport", "width", "innerWidth", "viewportHeight", "height", "innerHeight", "viewportX", "scrollX", "pageXOffset", "viewportY", "scrollY", "pageYOffset", "getBoundingClientRect", "targetHeight", "targetWidth", "targetTop", "top", "targetRight", "right", "targetBottom", "bottom", "targetLeft", "left", "targetBlock", "targetInline", "computations", "index", "length", "frameStyle", "borderLeft", "parseInt", "borderLeftWidth", "borderTop", "borderTopWidth", "borderRight", "borderRightWidth", "borderBottom", "borderBottomWidth", "blockScroll", "inlineScroll", "scrollbarWidth", "offsetWidth", "scrollbarHeight", "offsetHeight", "Math", "max", "scrollLeft", "scrollTop", "min", "now", "ease", "t", "method", "x", "y", "shouldSmoothScroll", "es_default"]
}
