import {
  useDialog,
  useDialogDisclosure,
  useDialogState
} from "./chunk-NVIKVDCQ.js";
import {
  isUA,
  useForkRef,
  useIsomorphicEffect,
  useSealedState,
  useWarning
} from "./chunk-BQDU2HTA.js";
import {
  _objectSpread2,
  _objectWithoutPropertiesLoose,
  createComponent,
  createHook,
  shallowEqual,
  useCreateElement,
  useRole
} from "./chunk-EDJXIEOR.js";
import {
  createPopper
} from "./chunk-HH4MHGJP.js";
import {
  require_react_dom
} from "./chunk-BCULJ5QE.js";
import {
  require_react
} from "./chunk-NSZELEHI.js";
import {
  __name,
  __toESM
} from "./chunk-4OCRLPSA.js";

// node_modules/reakit/es/Popover/PopoverState.js
var import_react = __toESM(require_react());
var isSafari = isUA("Mac") && !isUA("Chrome") && isUA("Safari");
function applyStyles(styles) {
  return function(prevStyles) {
    if (styles && !shallowEqual(prevStyles, styles)) {
      return styles;
    }
    return prevStyles;
  };
}
__name(applyStyles, "applyStyles");
function usePopoverState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$gutte = _useSealedState.gutter, gutter = _useSealedState$gutte === void 0 ? 12 : _useSealedState$gutte, _useSealedState$place = _useSealedState.placement, sealedPlacement = _useSealedState$place === void 0 ? "bottom" : _useSealedState$place, _useSealedState$unsta = _useSealedState.unstable_flip, flip = _useSealedState$unsta === void 0 ? true : _useSealedState$unsta, sealedOffset = _useSealedState.unstable_offset, _useSealedState$unsta2 = _useSealedState.unstable_preventOverflow, preventOverflow = _useSealedState$unsta2 === void 0 ? true : _useSealedState$unsta2, _useSealedState$unsta3 = _useSealedState.unstable_fixed, fixed = _useSealedState$unsta3 === void 0 ? false : _useSealedState$unsta3, _useSealedState$modal = _useSealedState.modal, modal = _useSealedState$modal === void 0 ? false : _useSealedState$modal, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["gutter", "placement", "unstable_flip", "unstable_offset", "unstable_preventOverflow", "unstable_fixed", "modal"]);
  var popper = (0, import_react.useRef)(null);
  var referenceRef = (0, import_react.useRef)(null);
  var popoverRef = (0, import_react.useRef)(null);
  var arrowRef = (0, import_react.useRef)(null);
  var _React$useState = (0, import_react.useState)(sealedPlacement), originalPlacement = _React$useState[0], place = _React$useState[1];
  var _React$useState2 = (0, import_react.useState)(sealedPlacement), placement = _React$useState2[0], setPlacement = _React$useState2[1];
  var _React$useState3 = (0, import_react.useState)(sealedOffset || [0, gutter]), offset = _React$useState3[0];
  var _React$useState4 = (0, import_react.useState)({
    position: "fixed",
    left: "100%",
    top: "100%"
  }), popoverStyles = _React$useState4[0], setPopoverStyles = _React$useState4[1];
  var _React$useState5 = (0, import_react.useState)({}), arrowStyles = _React$useState5[0], setArrowStyles = _React$useState5[1];
  var dialog = useDialogState(_objectSpread2({
    modal
  }, sealed));
  var update = (0, import_react.useCallback)(function() {
    if (popper.current) {
      popper.current.forceUpdate();
      return true;
    }
    return false;
  }, []);
  var updateState = (0, import_react.useCallback)(function(state) {
    if (state.placement) {
      setPlacement(state.placement);
    }
    if (state.styles) {
      setPopoverStyles(applyStyles(state.styles.popper));
      if (arrowRef.current) {
        setArrowStyles(applyStyles(state.styles.arrow));
      }
    }
  }, []);
  useIsomorphicEffect(function() {
    if (referenceRef.current && popoverRef.current) {
      popper.current = createPopper(referenceRef.current, popoverRef.current, {
        // https://popper.js.org/docs/v2/constructors/#options
        placement: originalPlacement,
        strategy: fixed ? "fixed" : "absolute",
        // Safari needs styles to be applied in the first render, otherwise
        // hovering over the popover when it gets visible for the first time
        // will change its dimensions unexpectedly.
        onFirstUpdate: isSafari ? updateState : void 0,
        modifiers: [{
          // https://popper.js.org/docs/v2/modifiers/event-listeners/
          name: "eventListeners",
          enabled: dialog.visible
        }, {
          // https://popper.js.org/docs/v2/modifiers/apply-styles/
          name: "applyStyles",
          enabled: false
        }, {
          // https://popper.js.org/docs/v2/modifiers/flip/
          name: "flip",
          enabled: flip,
          options: {
            padding: 8
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/offset/
          name: "offset",
          options: {
            offset
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/prevent-overflow/
          name: "preventOverflow",
          enabled: preventOverflow,
          options: {
            tetherOffset: /* @__PURE__ */ __name(function tetherOffset() {
              var _arrowRef$current;
              return ((_arrowRef$current = arrowRef.current) === null || _arrowRef$current === void 0 ? void 0 : _arrowRef$current.clientWidth) || 0;
            }, "tetherOffset")
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/arrow/
          name: "arrow",
          enabled: !!arrowRef.current,
          options: {
            element: arrowRef.current
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/#custom-modifiers
          name: "updateState",
          phase: "write",
          requires: ["computeStyles"],
          enabled: dialog.visible && true,
          fn: /* @__PURE__ */ __name(function fn(_ref) {
            var state = _ref.state;
            return updateState(state);
          }, "fn")
        }]
      });
    }
    return function() {
      if (popper.current) {
        popper.current.destroy();
        popper.current = null;
      }
    };
  }, [originalPlacement, fixed, dialog.visible, flip, offset, preventOverflow]);
  (0, import_react.useEffect)(function() {
    if (!dialog.visible) return void 0;
    var id = window.requestAnimationFrame(function() {
      var _popper$current;
      (_popper$current = popper.current) === null || _popper$current === void 0 ? void 0 : _popper$current.forceUpdate();
    });
    return function() {
      window.cancelAnimationFrame(id);
    };
  }, [dialog.visible]);
  return _objectSpread2(_objectSpread2({}, dialog), {}, {
    unstable_referenceRef: referenceRef,
    unstable_popoverRef: popoverRef,
    unstable_arrowRef: arrowRef,
    unstable_popoverStyles: popoverStyles,
    unstable_arrowStyles: arrowStyles,
    unstable_update: update,
    unstable_originalPlacement: originalPlacement,
    placement,
    place
  });
}
__name(usePopoverState, "usePopoverState");

// node_modules/reakit/es/__keys-26bb1730.js
var POPOVER_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "modal", "unstable_disclosureRef", "setModal", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "place"];
var POPOVER_KEYS = POPOVER_STATE_KEYS;
var POPOVER_ARROW_KEYS = [].concat(POPOVER_KEYS, ["size"]);
var POPOVER_BACKDROP_KEYS = POPOVER_KEYS;
var POPOVER_DISCLOSURE_KEYS = POPOVER_BACKDROP_KEYS;

// node_modules/reakit/es/Popover/Popover.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var usePopover = createHook({
  name: "Popover",
  compose: useDialog,
  keys: POPOVER_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions(_ref) {
    var _ref$modal = _ref.modal, modal = _ref$modal === void 0 ? false : _ref$modal, options = _objectWithoutPropertiesLoose(_ref, ["modal"]);
    return _objectSpread2({
      modal
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps(options, _ref2) {
    var htmlRef = _ref2.ref, htmlStyle = _ref2.style, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["ref", "style"]);
    return _objectSpread2({
      ref: useForkRef(options.unstable_popoverRef, htmlRef),
      style: _objectSpread2(_objectSpread2({}, options.unstable_popoverStyles), htmlStyle)
    }, htmlProps);
  }, "useProps")
});
var Popover = createComponent({
  as: "div",
  useHook: usePopover,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$1(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/popover") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Popover/PopoverArrow.js
var import_react3 = __toESM(require_react());
var usePopoverArrow = createHook({
  name: "PopoverArrow",
  compose: useRole,
  keys: POPOVER_ARROW_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions2(_ref) {
    var _ref$size = _ref.size, size = _ref$size === void 0 ? 30 : _ref$size, options = _objectWithoutPropertiesLoose(_ref, ["size"]);
    return _objectSpread2({
      size
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps2(options, _ref2) {
    var _objectSpread2$1;
    var htmlRef = _ref2.ref, htmlStyle = _ref2.style, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["ref", "style"]);
    var _options$placement$sp = options.placement.split("-"), placement = _options$placement$sp[0];
    var transformMap = {
      top: "rotateZ(180deg)",
      right: "rotateZ(-90deg)",
      bottom: "rotateZ(360deg)",
      left: "rotateZ(90deg)"
    };
    var arrowStyles = options.unstable_arrowStyles;
    var transform = transformMap[placement];
    var children = (0, import_react3.useMemo)(function() {
      return (0, import_react3.createElement)("svg", {
        viewBox: "0 0 30 30",
        style: {
          transform
        }
      }, (0, import_react3.createElement)("path", {
        className: "stroke",
        d: "M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
      }), (0, import_react3.createElement)("path", {
        className: "fill",
        d: "M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
      }));
    }, [transform]);
    return _objectSpread2({
      ref: useForkRef(options.unstable_arrowRef, htmlRef),
      style: _objectSpread2(_objectSpread2({}, arrowStyles), {}, (_objectSpread2$1 = {
        fontSize: options.size,
        width: "1em",
        height: "1em",
        pointerEvents: "none"
      }, _objectSpread2$1[placement] = "100%", _objectSpread2$1), htmlStyle),
      children
    }, htmlProps);
  }, "useProps")
});
var PopoverArrow = createComponent({
  as: "div",
  memo: true,
  useHook: usePopoverArrow
});

// node_modules/reakit/es/Popover/PopoverDisclosure.js
var import_react4 = __toESM(require_react());
var usePopoverDisclosure = createHook({
  name: "PopoverDisclosure",
  compose: useDialogDisclosure,
  keys: POPOVER_DISCLOSURE_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps3(options, _ref) {
    var htmlRef = _ref.ref, htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref"]);
    return _objectSpread2({
      ref: useForkRef(options.unstable_referenceRef, htmlRef)
    }, htmlProps);
  }, "useProps")
});
var PopoverDisclosure = createComponent({
  as: "button",
  memo: true,
  useHook: usePopoverDisclosure
});

export {
  usePopoverState,
  POPOVER_BACKDROP_KEYS,
  usePopover,
  Popover,
  usePopoverArrow,
  PopoverArrow,
  usePopoverDisclosure,
  PopoverDisclosure
};
//# sourceMappingURL=chunk-MVKBUG3V.js.map
