{
  "version": 3,
  "sources": ["../../lodash/_baseClamp.js", "../../lodash/toLength.js", "../../lodash/_baseFill.js", "../../lodash/fill.js"],
  "sourcesContent": ["/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n", "var baseClamp = require('./_baseClamp'),\n    toInteger = require('./toInteger');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toLength(3.2);\n * // => 3\n *\n * _.toLength(Number.MIN_VALUE);\n * // => 0\n *\n * _.toLength(Infinity);\n * // => 4294967295\n *\n * _.toLength('3.2');\n * // => 3\n */\nfunction toLength(value) {\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n}\n\nmodule.exports = toLength;\n", "var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nmodule.exports = baseFill;\n", "var baseFill = require('./_baseFill'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Fills elements of `array` with `value` from `start` up to, but not\n * including, `end`.\n *\n * **Note:** This method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Array\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3];\n *\n * _.fill(array, 'a');\n * console.log(array);\n * // => ['a', 'a', 'a']\n *\n * _.fill(Array(3), 2);\n * // => [2, 2, 2]\n *\n * _.fill([4, 6, 8, 10], '*', 1, 3);\n * // => [4, '*', '*', 10]\n */\nfunction fill(array, value, start, end) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n    start = 0;\n    end = length;\n  }\n  return baseFill(array, value, start, end);\n}\n\nmodule.exports = fill;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AASA,aAAS,UAAU,QAAQ,OAAO,OAAO;AACvC,UAAI,WAAW,QAAQ;AACrB,YAAI,UAAU,QAAW;AACvB,mBAAS,UAAU,QAAQ,SAAS;AAAA,QACtC;AACA,YAAI,UAAU,QAAW;AACvB,mBAAS,UAAU,QAAQ,SAAS;AAAA,QACtC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAVS;AAYT,WAAO,UAAU;AAAA;AAAA;;;ACrBjB;AAAA;AAAA,QAAI,YAAY;AAAhB,QACI,YAAY;AAGhB,QAAI,mBAAmB;AA6BvB,aAAS,SAAS,OAAO;AACvB,aAAO,QAAQ,UAAU,UAAU,KAAK,GAAG,GAAG,gBAAgB,IAAI;AAAA,IACpE;AAFS;AAIT,WAAO,UAAU;AAAA;AAAA;;;ACrCjB;AAAA;AAAA,QAAI,YAAY;AAAhB,QACI,WAAW;AAYf,aAAS,SAAS,OAAO,OAAO,OAAO,KAAK;AAC1C,UAAI,SAAS,MAAM;AAEnB,cAAQ,UAAU,KAAK;AACvB,UAAI,QAAQ,GAAG;AACb,gBAAQ,CAAC,QAAQ,SAAS,IAAK,SAAS;AAAA,MAC1C;AACA,YAAO,QAAQ,UAAa,MAAM,SAAU,SAAS,UAAU,GAAG;AAClE,UAAI,MAAM,GAAG;AACX,eAAO;AAAA,MACT;AACA,YAAM,QAAQ,MAAM,IAAI,SAAS,GAAG;AACpC,aAAO,QAAQ,KAAK;AAClB,cAAM,OAAO,IAAI;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAhBS;AAkBT,WAAO,UAAU;AAAA;AAAA;;;AC/BjB;AAAA;AAAA,QAAI,WAAW;AAAf,QACI,iBAAiB;AA+BrB,aAAS,KAAK,OAAO,OAAO,OAAO,KAAK;AACtC,UAAI,SAAS,SAAS,OAAO,IAAI,MAAM;AACvC,UAAI,CAAC,QAAQ;AACX,eAAO,CAAC;AAAA,MACV;AACA,UAAI,SAAS,OAAO,SAAS,YAAY,eAAe,OAAO,OAAO,KAAK,GAAG;AAC5E,gBAAQ;AACR,cAAM;AAAA,MACR;AACA,aAAO,SAAS,OAAO,OAAO,OAAO,GAAG;AAAA,IAC1C;AAVS;AAYT,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
