{
  "version": 3,
  "sources": ["../../lodash/_charsEndIndex.js", "../../lodash/_charsStartIndex.js", "../../lodash/trim.js"],
  "sourcesContent": ["var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsEndIndex;\n", "var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsStartIndex;\n", "var baseToString = require('./_baseToString'),\n    baseTrim = require('./_baseTrim'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,QAAI,cAAc;AAWlB,aAAS,cAAc,YAAY,YAAY;AAC7C,UAAI,QAAQ,WAAW;AAEvB,aAAO,WAAW,YAAY,YAAY,WAAW,KAAK,GAAG,CAAC,IAAI,IAAI;AAAA,MAAC;AACvE,aAAO;AAAA,IACT;AALS;AAOT,WAAO,UAAU;AAAA;AAAA;;;AClBjB;AAAA;AAAA,QAAI,cAAc;AAWlB,aAAS,gBAAgB,YAAY,YAAY;AAC/C,UAAI,QAAQ,IACR,SAAS,WAAW;AAExB,aAAO,EAAE,QAAQ,UAAU,YAAY,YAAY,WAAW,KAAK,GAAG,CAAC,IAAI,IAAI;AAAA,MAAC;AAChF,aAAO;AAAA,IACT;AANS;AAQT,WAAO,UAAU;AAAA;AAAA;;;ACnBjB;AAAA;AAAA,QAAI,eAAe;AAAnB,QACI,WAAW;AADf,QAEI,YAAY;AAFhB,QAGI,gBAAgB;AAHpB,QAII,kBAAkB;AAJtB,QAKI,gBAAgB;AALpB,QAMI,WAAW;AAwBf,aAAS,KAAK,QAAQ,OAAO,OAAO;AAClC,eAAS,SAAS,MAAM;AACxB,UAAI,WAAW,SAAS,UAAU,SAAY;AAC5C,eAAO,SAAS,MAAM;AAAA,MACxB;AACA,UAAI,CAAC,UAAU,EAAE,QAAQ,aAAa,KAAK,IAAI;AAC7C,eAAO;AAAA,MACT;AACA,UAAI,aAAa,cAAc,MAAM,GACjC,aAAa,cAAc,KAAK,GAChC,QAAQ,gBAAgB,YAAY,UAAU,GAC9C,MAAM,cAAc,YAAY,UAAU,IAAI;AAElD,aAAO,UAAU,YAAY,OAAO,GAAG,EAAE,KAAK,EAAE;AAAA,IAClD;AAdS;AAgBT,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
