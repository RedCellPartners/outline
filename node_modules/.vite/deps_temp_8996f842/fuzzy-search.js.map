{
  "version": 3,
  "sources": ["../../fuzzy-search/src/Helper.js", "../../fuzzy-search/src/FuzzySearch.js"],
  "sourcesContent": ["export default class Helper {\n  static getDescendantProperty(object, path, list = []) {\n    let firstSegment;\n    let remaining;\n    let dotIndex;\n    let value;\n    let index;\n    let length;\n\n    if (path) {\n      dotIndex = path.indexOf('.');\n\n      if (dotIndex === -1) {\n        firstSegment = path;\n      } else {\n        firstSegment = path.slice(0, dotIndex);\n        remaining = path.slice(dotIndex + 1);\n      }\n\n      value = object[firstSegment];\n      if (value !== null && typeof value !== 'undefined') {\n        if (! remaining && (typeof value === 'string' || typeof value === 'number')) {\n          list.push(value);\n        } else if (Object.prototype.toString.call(value) === '[object Array]') {\n          for (index = 0, length = value.length; index < length; index++) {\n            Helper.getDescendantProperty(value[index], remaining, list);\n          }\n        } else if (remaining) {\n          Helper.getDescendantProperty(value, remaining, list);\n        }\n      }\n    } else {\n      list.push(object);\n    }\n\n    return list;\n  }\n}\n", "import Helper from './Helper';\n\nexport default class FuzzySearch {\n  constructor(haystack = [], keys = [], options = {}) {\n    if (! Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false,\n    }, options);\n  }\n\n  search(query = '') {\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({ item, score });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n\n              results.push({ item, score });\n\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (! caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (! indexes) {\n      return false;\n    }\n\n    // Exact matches should be first.\n    if (item === query) {\n      return 1;\n    }\n\n    // If we have more than 2 letters, matches close to each other should be first.\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    }\n\n    // Matches closest to the start of the string should be first.\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n\n        index++;\n      }\n    });\n\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (! indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
