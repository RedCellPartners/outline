import {
  __commonJS,
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/natural-sort/dist/natural-sort.js
var require_natural_sort = __commonJS({
  "node_modules/natural-sort/dist/natural-sort.js"(exports, module) {
    var naturalSort = /* @__PURE__ */ __name(function naturalSort2(options) {
      "use strict";
      if (!options) options = {};
      return function(a, b) {
        var EQUAL = 0;
        var GREATER = options.direction == "desc" ? -1 : 1;
        var SMALLER = -GREATER;
        var re = /(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi;
        var sre = /(^[ ]*|[ ]*$)/g;
        var dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/;
        var hre = /^0x[0-9a-f]+$/i;
        var ore = /^0/;
        var normalize = /* @__PURE__ */ __name(function normalize2(value) {
          var string = "" + value;
          return options.caseSensitive ? string : string.toLowerCase();
        }, "normalize");
        var x = normalize(a).replace(sre, "") || "";
        var y = normalize(b).replace(sre, "") || "";
        var xN = x.replace(re, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0");
        var yN = y.replace(re, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0");
        if (!x && !y) return EQUAL;
        if (!x && y) return GREATER;
        if (x && !y) return SMALLER;
        var xD = parseInt(x.match(hre)) || xN.length != 1 && x.match(dre) && Date.parse(x);
        var yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null;
        var oFxNcL, oFyNcL;
        if (yD) {
          if (xD < yD) return SMALLER;
          else if (xD > yD) return GREATER;
        }
        for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
          oFxNcL = !(xN[cLoc] || "").match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
          oFyNcL = !(yN[cLoc] || "").match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
          if (isNaN(oFxNcL) !== isNaN(oFyNcL)) return isNaN(oFxNcL) ? GREATER : SMALLER;
          else if (typeof oFxNcL !== typeof oFyNcL) {
            oFxNcL += "";
            oFyNcL += "";
          }
          if (oFxNcL < oFyNcL) return SMALLER;
          if (oFxNcL > oFyNcL) return GREATER;
        }
        return EQUAL;
      };
    }, "naturalSort");
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.naturalSort = factory();
      }
    })(exports, function() {
      return naturalSort;
    });
  }
});
export default require_natural_sort();
/*! Bundled license information:

natural-sort/dist/natural-sort.js:
  (*!
   * natural-sort.js
   * ===============
   * Sorting with support for numbers, dates, unicode and more.
   *
   * http://github.com/studio-b12/natural-sort
   * MIT License, Â© Studio B12 GmbH 2014
   *
   *)
*/
//# sourceMappingURL=natural-sort.js.map
