import {
  require_isArrayLikeObject
} from "./chunk-J5QC6NPT.js";
import {
  require_baseRest
} from "./chunk-NQXUEOL4.js";
import {
  require_arrayIncludes,
  require_arrayIncludesWith
} from "./chunk-3X4HJE32.js";
import "./chunk-JPYP7AN5.js";
import "./chunk-PTOXHWB6.js";
import "./chunk-ZX4X74ET.js";
import {
  require_SetCache,
  require_cacheHas
} from "./chunk-EI6DVPNS.js";
import "./chunk-LHL4OCUX.js";
import "./chunk-WYSB6OLL.js";
import "./chunk-2KURYKWL.js";
import {
  require_baseUnary
} from "./chunk-2KF27AN6.js";
import "./chunk-5QUZ3FR6.js";
import {
  require_arrayMap
} from "./chunk-QF3D4JX4.js";
import "./chunk-NWNIBY6L.js";
import "./chunk-3U7WAVHY.js";
import "./chunk-FYQ2IM4H.js";
import "./chunk-3RLUHW6L.js";
import "./chunk-3XSWJKH3.js";
import "./chunk-DVPYEZGB.js";
import "./chunk-MNAC73SF.js";
import {
  __commonJS,
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/lodash/_baseIntersection.js
var require_baseIntersection = __commonJS({
  "node_modules/lodash/_baseIntersection.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var nativeMin = Math.min;
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : void 0;
      }
      array = arrays[0];
      var index = -1, seen = caches[0];
      outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    __name(baseIntersection, "baseIntersection");
    module.exports = baseIntersection;
  }
});

// node_modules/lodash/_castArrayLikeObject.js
var require_castArrayLikeObject = __commonJS({
  "node_modules/lodash/_castArrayLikeObject.js"(exports, module) {
    var isArrayLikeObject = require_isArrayLikeObject();
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }
    __name(castArrayLikeObject, "castArrayLikeObject");
    module.exports = castArrayLikeObject;
  }
});

// node_modules/lodash/intersection.js
var require_intersection = __commonJS({
  "node_modules/lodash/intersection.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseIntersection = require_baseIntersection();
    var baseRest = require_baseRest();
    var castArrayLikeObject = require_castArrayLikeObject();
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });
    module.exports = intersection;
  }
});
export default require_intersection();
//# sourceMappingURL=lodash_intersection.js.map
