import {
  COMPOSITE_GROUP_KEYS,
  COMPOSITE_ITEM_WIDGET_KEYS,
  RADIO_GROUP_KEYS,
  findEnabledItemById,
  isTextField,
  setTextFieldValue,
  unstable_useId,
  useCheckbox,
  useComposite,
  useCompositeItem,
  useCompositeState,
  useRadio,
  useSeparator
} from "./chunk-QDPWHEAJ.js";
import {
  usePopover,
  usePopoverArrow,
  usePopoverState
} from "./chunk-MVKBUG3V.js";
import {
  Portal,
  isEmpty,
  useUpdateEffect
} from "./chunk-NVIKVDCQ.js";
import {
  getDocument,
  hasFocusWithin,
  isSelfTarget,
  unstable_IdProvider,
  unstable_useIdState,
  useButton,
  useClickable,
  useDisclosureContent,
  useForkRef,
  useIsomorphicEffect,
  useLiveRef,
  useSealedState,
  useTabbable,
  useWarning,
  warning
} from "./chunk-BQDU2HTA.js";
import {
  SystemContext,
  _createForOfIteratorHelperLoose,
  _objectSpread2,
  _objectWithoutPropertiesLoose,
  createComponent,
  createHook,
  isObject,
  isPlainObject,
  shallowEqual,
  toArray,
  useCreateElement,
  useRole
} from "./chunk-EDJXIEOR.js";
import {
  require_react_dom
} from "./chunk-BCULJ5QE.js";
import {
  require_react
} from "./chunk-NSZELEHI.js";
import {
  __name,
  __toESM
} from "./chunk-4OCRLPSA.js";

// node_modules/reakit/es/Box/Box.js
var BOX_KEYS = ["unstable_system"];
var useBox = createHook({
  name: "Box",
  keys: BOX_KEYS,
  propsAreEqual: /* @__PURE__ */ __name(function propsAreEqual(prev, next) {
    var prevSystem = prev.unstable_system, prevProps = _objectWithoutPropertiesLoose(prev, ["unstable_system"]);
    var nextSystem = next.unstable_system, nextProps = _objectWithoutPropertiesLoose(next, ["unstable_system"]);
    if (prevSystem !== nextSystem && !shallowEqual(prevSystem, nextSystem)) {
      return false;
    }
    return shallowEqual(prevProps, nextProps);
  }, "propsAreEqual")
});
var Box = createComponent({
  as: "div",
  useHook: useBox
});

// node_modules/reakit/es/index.js
var import_react47 = __toESM(require_react());

// node_modules/reakit/es/Checkbox/CheckboxState.js
var import_react = __toESM(require_react());
function useCheckboxState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$state = _useSealedState.state, initialValue = _useSealedState$state === void 0 ? false : _useSealedState$state;
  var _React$useState = (0, import_react.useState)(initialValue), state = _React$useState[0], setState = _React$useState[1];
  return {
    state,
    setState
  };
}
__name(useCheckboxState, "useCheckboxState");

// node_modules/reakit/es/__keys-0f89298f.js
var COMBOBOX_LIST_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "items", "menuRole", "inputValue", "minValueLength", "currentValue", "values", "limit", "matches", "list", "inline", "autoSelect", "visible", "setBaseId", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget", "registerItem", "setInputValue", "setMinValueLength", "setValues", "setLimit", "setList", "setInline", "setAutoSelect"];
var COMBOBOX_LIST_GRID_STATE_KEYS = [].concat(COMBOBOX_LIST_STATE_KEYS, ["columns", "setColumns"]);
var COMBOBOX_STATE_KEYS = [].concat(COMBOBOX_LIST_STATE_KEYS, ["animated", "animating", "modal", "unstable_disclosureRef", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "setModal", "place"]);
var COMBOBOX_GRID_STATE_KEYS = [].concat(COMBOBOX_LIST_GRID_STATE_KEYS, COMBOBOX_STATE_KEYS);
var COMBOBOX_KEYS = [].concat(COMBOBOX_GRID_STATE_KEYS, ["hideOnEsc"]);
var COMBOBOX_GRID_CELL_KEYS = COMBOBOX_GRID_STATE_KEYS;
var COMBOBOX_GRID_ROW_KEYS = COMBOBOX_GRID_CELL_KEYS;
var COMBOBOX_ITEM_KEYS = [].concat(COMBOBOX_GRID_ROW_KEYS, ["value"]);
var COMBOBOX_LIST_KEYS = COMBOBOX_GRID_ROW_KEYS;
var COMBOBOX_OPTION_KEYS = COMBOBOX_LIST_KEYS;
var COMBOBOX_POPOVER_KEYS = COMBOBOX_OPTION_KEYS;

// node_modules/reakit/es/getMenuId-34730bd3.js
function getMenuId(baseId) {
  return baseId + "-menu";
}
__name(getMenuId, "getMenuId");

// node_modules/reakit/es/Combobox/Combobox.js
var import_react2 = __toESM(require_react());
function getControls(baseId, ariaControls) {
  var menuId = getMenuId(baseId);
  if (ariaControls) {
    return ariaControls + " " + menuId;
  }
  return menuId;
}
__name(getControls, "getControls");
function getAutocomplete(options) {
  if (options.list && options.inline) return "both";
  if (options.list) return "list";
  if (options.inline) return "inline";
  return "none";
}
__name(getAutocomplete, "getAutocomplete");
function isFirstItemAutoSelected(items, autoSelect, currentId) {
  if (!autoSelect) return false;
  var firstItem = items.find(function(item) {
    return !item.disabled;
  });
  return currentId && (firstItem === null || firstItem === void 0 ? void 0 : firstItem.id) === currentId;
}
__name(isFirstItemAutoSelected, "isFirstItemAutoSelected");
function hasCompletionString(inputValue, currentValue) {
  return !!currentValue && currentValue.length > inputValue.length && currentValue.toLowerCase().indexOf(inputValue.toLowerCase()) === 0;
}
__name(hasCompletionString, "hasCompletionString");
function getCompletionString(inputValue, currentValue) {
  if (!currentValue) return "";
  var index = currentValue.toLowerCase().indexOf(inputValue.toLowerCase());
  return currentValue.slice(index + inputValue.length);
}
__name(getCompletionString, "getCompletionString");
function useValue(options) {
  return (0, import_react2.useMemo)(function() {
    if (!options.inline) {
      return options.inputValue;
    }
    var firstItemAutoSelected = isFirstItemAutoSelected(options.items, options.autoSelect, options.currentId);
    if (firstItemAutoSelected) {
      if (hasCompletionString(options.inputValue, options.currentValue)) {
        return options.inputValue + getCompletionString(options.inputValue, options.currentValue);
      }
      return options.inputValue;
    }
    return options.currentValue || options.inputValue;
  }, [options.inline, options.inputValue, options.autoSelect, options.items, options.currentId, options.currentValue]);
}
__name(useValue, "useValue");
function getFirstEnabledItemId(items) {
  var _items$find;
  return (_items$find = items.find(function(item) {
    return !item.disabled;
  })) === null || _items$find === void 0 ? void 0 : _items$find.id;
}
__name(getFirstEnabledItemId, "getFirstEnabledItemId");
var unstable_useCombobox = createHook({
  name: "Combobox",
  compose: useComposite,
  keys: COMBOBOX_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions(_ref) {
    var _ref$menuRole = _ref.menuRole, menuRole = _ref$menuRole === void 0 ? "listbox" : _ref$menuRole, _ref$hideOnEsc = _ref.hideOnEsc, hideOnEsc = _ref$hideOnEsc === void 0 ? true : _ref$hideOnEsc, options = _objectWithoutPropertiesLoose(_ref, ["menuRole", "hideOnEsc"]);
    return _objectSpread2({
      menuRole,
      hideOnEsc
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps(options, _ref2) {
    var htmlRef = _ref2.ref, htmlOnKeyDown = _ref2.onKeyDown, htmlOnKeyPress = _ref2.onKeyPress, htmlOnChange = _ref2.onChange, htmlOnClick = _ref2.onClick, htmlOnBlur = _ref2.onBlur, ariaControls = _ref2["aria-controls"], htmlProps = _objectWithoutPropertiesLoose(_ref2, ["ref", "onKeyDown", "onKeyPress", "onChange", "onClick", "onBlur", "aria-controls"]);
    var ref = (0, import_react2.useRef)(null);
    var _React$useReducer = (0, import_react2.useReducer)(function() {
      return {};
    }, {}), updated = _React$useReducer[0], update = _React$useReducer[1];
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onKeyPressRef = useLiveRef(htmlOnKeyPress);
    var onChangeRef = useLiveRef(htmlOnChange);
    var onClickRef = useLiveRef(htmlOnClick);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var value = useValue(options);
    var hasInsertedTextRef = (0, import_react2.useRef)(false);
    (0, import_react2.useEffect)(function() {
      if (!options.inline) return;
      if (!options.autoSelect) return;
      if (!options.currentValue) return;
      if (options.currentId !== getFirstEnabledItemId(options.items)) return;
      if (!hasCompletionString(options.inputValue, options.currentValue)) {
        return;
      }
      var element = ref.current;
      true ? warning(!element, "Can't auto select combobox because `ref` wasn't passed to the component", "See https://reakit.io/docs/combobox") : void 0;
      element === null || element === void 0 ? void 0 : element.setSelectionRange(options.inputValue.length, options.currentValue.length);
    }, [updated, options.inline, options.autoSelect, options.currentValue, options.inputValue, options.currentId, options.items]);
    useUpdateEffect(function() {
      if (options.autoSelect && options.items.length && hasInsertedTextRef.current) {
        options.setCurrentId(void 0);
      } else {
        options.setCurrentId(null);
      }
    }, [options.items, options.inputValue, options.autoSelect, options.setCurrentId]);
    var onKeyDown = (0, import_react2.useCallback)(function(event) {
      var _onKeyDownRef$current;
      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      hasInsertedTextRef.current = false;
      if (event.defaultPrevented) return;
      if (event.key === "Escape" && options.hideOnEsc) {
        var _options$hide;
        (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
      }
    }, [options.hideOnEsc, options.hide]);
    var onKeyPress = (0, import_react2.useCallback)(function(event) {
      var _onKeyPressRef$curren;
      (_onKeyPressRef$curren = onKeyPressRef.current) === null || _onKeyPressRef$curren === void 0 ? void 0 : _onKeyPressRef$curren.call(onKeyPressRef, event);
      hasInsertedTextRef.current = true;
    }, []);
    var onChange = (0, import_react2.useCallback)(function(event) {
      var _onChangeRef$current, _options$show, _options$setInputValu;
      (_onChangeRef$current = onChangeRef.current) === null || _onChangeRef$current === void 0 ? void 0 : _onChangeRef$current.call(onChangeRef, event);
      if (event.defaultPrevented) return;
      (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);
      (_options$setInputValu = options.setInputValue) === null || _options$setInputValu === void 0 ? void 0 : _options$setInputValu.call(options, event.target.value);
      update();
      if (!options.autoSelect || !hasInsertedTextRef.current) {
        var _options$setCurrentId;
        (_options$setCurrentId = options.setCurrentId) === null || _options$setCurrentId === void 0 ? void 0 : _options$setCurrentId.call(options, null);
      } else {
        var _options$setCurrentId2;
        (_options$setCurrentId2 = options.setCurrentId) === null || _options$setCurrentId2 === void 0 ? void 0 : _options$setCurrentId2.call(options, void 0);
      }
    }, [options.show, options.autoSelect, options.setCurrentId, options.setInputValue]);
    var onClick = (0, import_react2.useCallback)(function(event) {
      var _onClickRef$current, _options$setCurrentId3;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      if (!options.minValueLength || value.length >= options.minValueLength) {
        var _options$show2;
        (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);
      }
      (_options$setCurrentId3 = options.setCurrentId) === null || _options$setCurrentId3 === void 0 ? void 0 : _options$setCurrentId3.call(options, null);
      options.setInputValue(value);
    }, [options.show, options.setCurrentId, options.setInputValue, options.minValueLength, value]);
    var onBlur = (0, import_react2.useCallback)(function(event) {
      var _onBlurRef$current;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      options.setInputValue(value);
    }, [options.setInputValue, value]);
    return _objectSpread2({
      ref: useForkRef(ref, useForkRef(options.unstable_referenceRef, htmlRef)),
      role: "combobox",
      autoComplete: "off",
      "aria-controls": getControls(options.baseId, ariaControls),
      "aria-haspopup": options.menuRole,
      "aria-expanded": options.visible,
      "aria-autocomplete": getAutocomplete(options),
      value,
      onKeyDown,
      onKeyPress,
      onChange,
      onClick,
      onBlur
    }, htmlProps);
  }, "useProps"),
  useComposeProps: /* @__PURE__ */ __name(function useComposeProps(options, _ref3) {
    var onKeyUp = _ref3.onKeyUp, htmlOnKeyDownCapture = _ref3.onKeyDownCapture, htmlOnKeyDown = _ref3.onKeyDown, htmlProps = _objectWithoutPropertiesLoose(_ref3, ["onKeyUp", "onKeyDownCapture", "onKeyDown"]);
    var compositeHTMLProps = useComposite(options, htmlProps, true);
    var onKeyDownCaptureRef = useLiveRef(htmlOnKeyDownCapture);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onKeyDownCapture = (0, import_react2.useCallback)(function(event) {
      var _onKeyDownCaptureRef$, _compositeHTMLProps$o;
      (_onKeyDownCaptureRef$ = onKeyDownCaptureRef.current) === null || _onKeyDownCaptureRef$ === void 0 ? void 0 : _onKeyDownCaptureRef$.call(onKeyDownCaptureRef, event);
      if (event.defaultPrevented) return;
      if (options.menuRole !== "grid") {
        if (event.key === "Home") return;
        if (event.key === "End") return;
      }
      if (event.key.length === 1) return;
      (_compositeHTMLProps$o = compositeHTMLProps.onKeyDownCapture) === null || _compositeHTMLProps$o === void 0 ? void 0 : _compositeHTMLProps$o.call(compositeHTMLProps, event);
    }, [options.menuRole, compositeHTMLProps.onKeyDownCapture]);
    var onKeyDown = (0, import_react2.useCallback)(function(event) {
      var _onKeyDownRef$current2, _compositeHTMLProps$o2;
      (_onKeyDownRef$current2 = onKeyDownRef.current) === null || _onKeyDownRef$current2 === void 0 ? void 0 : _onKeyDownRef$current2.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;
      var onlyInputHasFocus = options.currentId === null;
      if (!onlyInputHasFocus) return;
      if (event.key === "ArrowLeft") return;
      if (event.key === "ArrowRight") return;
      if (event.key === "Home") return;
      if (event.key === "End") return;
      if (!event.ctrlKey && !event.altKey && !event.shiftKey && !event.metaKey && (event.key === "ArrowUp" || event.key === "ArrowDown" || event.key.length === 1)) {
        var _options$show3;
        (_options$show3 = options.show) === null || _options$show3 === void 0 ? void 0 : _options$show3.call(options);
      }
      (_compositeHTMLProps$o2 = compositeHTMLProps.onKeyDown) === null || _compositeHTMLProps$o2 === void 0 ? void 0 : _compositeHTMLProps$o2.call(compositeHTMLProps, event);
    }, [options.currentId, options.show, compositeHTMLProps.onKeyDown]);
    return _objectSpread2(_objectSpread2({}, compositeHTMLProps), {}, {
      onKeyDownCapture,
      onKeyDown,
      onKeyUp
    });
  }, "useComposeProps")
});
var unstable_Combobox = createComponent({
  as: "input",
  memo: true,
  useHook: unstable_useCombobox
});

// node_modules/reakit/es/__keys-08a69d36.js
var GRID_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "setBaseId", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget"];
var GRID_KEYS = GRID_STATE_KEYS;
var GRID_CELL_KEYS = GRID_KEYS;
var GRID_ROW_KEYS = GRID_CELL_KEYS;

// node_modules/reakit/es/Grid/GridCell.js
var import_react3 = __toESM(require_react());
var unstable_useGridCell = createHook({
  name: "GridCell",
  compose: useCompositeItem,
  keys: GRID_CELL_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps2(_, htmlProps) {
    return _objectSpread2({
      role: "gridcell"
    }, htmlProps);
  }, "useProps")
});
var unstable_GridCell = createComponent({
  as: "span",
  memo: true,
  useHook: unstable_useGridCell
});

// node_modules/reakit/es/Combobox/ComboboxItem.js
var import_react4 = __toESM(require_react());
function kebabCase(string) {
  return string.toLowerCase().replace(/[^a-z0-9]/g, "-");
}
__name(kebabCase, "kebabCase");
function getItemId(baseId, value, id) {
  return id || baseId + "-" + kebabCase(value);
}
__name(getItemId, "getItemId");
var unstable_useComboboxItem = createHook({
  name: "ComboboxItem",
  compose: useBox,
  keys: COMBOBOX_ITEM_KEYS,
  propsAreEqual: /* @__PURE__ */ __name(function propsAreEqual2(prev, next) {
    if (prev.value !== next.value) return false;
    if (!prev.value || !next.value || !prev.baseId || !next.baseId) {
      return useCompositeItem.unstable_propsAreEqual(prev, next);
    }
    var prevCurrentValue = prev.currentValue, prevInputValue = prev.inputValue, prevMatches = prev.matches, prevProps = _objectWithoutPropertiesLoose(prev, ["currentValue", "inputValue", "matches"]);
    var nextCurrentValue = next.currentValue, nextInputValue = next.inputValue, nextMatches = next.matches, nextProps = _objectWithoutPropertiesLoose(next, ["currentValue", "inputValue", "matches"]);
    if (prevCurrentValue !== nextCurrentValue) {
      if (next.value === prevCurrentValue || next.value === nextCurrentValue) {
        return false;
      }
    }
    var prevId = getItemId(prev.baseId, prev.value, prev.id);
    var nextId = getItemId(next.baseId, next.value, prev.id);
    return useCompositeItem.unstable_propsAreEqual(_objectSpread2(_objectSpread2({}, prevProps), {}, {
      id: prevId
    }), _objectSpread2(_objectSpread2({}, nextProps), {}, {
      id: nextId
    }));
  }, "propsAreEqual"),
  useOptions: /* @__PURE__ */ __name(function useOptions2(options) {
    var trulyDisabled = options.disabled && !options.focusable;
    var value = trulyDisabled ? void 0 : options.value;
    var registerItem = (0, import_react4.useCallback)(function(item) {
      if (options.visible) {
        var _options$registerItem;
        (_options$registerItem = options.registerItem) === null || _options$registerItem === void 0 ? void 0 : _options$registerItem.call(options, _objectSpread2(_objectSpread2({}, item), {}, {
          value
        }));
      }
    }, [options.registerItem, options.visible, value]);
    if (options.id || !options.baseId || !options.value) {
      return _objectSpread2(_objectSpread2({}, options), {}, {
        registerItem
      });
    }
    var id = getItemId(options.baseId, options.value, options.id);
    return _objectSpread2(_objectSpread2({}, options), {}, {
      registerItem,
      id
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps3(options, _ref) {
    var htmlOnClick = _ref.onClick, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onClick"]);
    var onClickRef = useLiveRef(htmlOnClick);
    var onClick = (0, import_react4.useCallback)(function(event) {
      var _onClickRef$current, _options$hide, _options$setInputValu;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      if (!options.value) return;
      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
      (_options$setInputValu = options.setInputValue) === null || _options$setInputValu === void 0 ? void 0 : _options$setInputValu.call(options, options.value);
    }, [options.hide, options.setInputValue, options.value]);
    return _objectSpread2({
      children: options.value,
      onClick,
      tabIndex: -1
    }, htmlProps);
  }, "useProps")
});
var unstable_ComboboxItem = createComponent({
  as: "span",
  memo: true,
  useHook: unstable_useComboboxItem
});

// node_modules/reakit/es/Combobox/ComboboxGridCell.js
var import_react5 = __toESM(require_react());
var unstable_useComboboxGridCell = createHook({
  name: "ComboboxGridCell",
  compose: [unstable_useComboboxItem, unstable_useGridCell],
  keys: COMBOBOX_GRID_CELL_KEYS
});
var unstable_ComboboxGridCell = createComponent({
  as: "span",
  memo: true,
  useHook: unstable_useComboboxGridCell
});

// node_modules/reakit/es/Group/Group.js
var GROUP_KEYS = [];
var useGroup = createHook({
  name: "Group",
  compose: useRole,
  keys: GROUP_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps4(_, htmlProps) {
    return _objectSpread2({
      role: "group"
    }, htmlProps);
  }, "useProps")
});
var Group = createComponent({
  as: "div",
  useHook: useGroup
});

// node_modules/reakit/es/Composite/CompositeGroup.js
var import_react6 = __toESM(require_react());
var useCompositeGroup = createHook({
  name: "CompositeGroup",
  compose: [useGroup, unstable_useId],
  keys: COMPOSITE_GROUP_KEYS,
  propsAreEqual: /* @__PURE__ */ __name(function propsAreEqual3(prev, next) {
    if (!next.id || prev.id !== next.id) {
      return useGroup.unstable_propsAreEqual(prev, next);
    }
    var prevCurrentId = prev.currentId, prevMoves = prev.unstable_moves, prevProps = _objectWithoutPropertiesLoose(prev, ["currentId", "unstable_moves"]);
    var nextCurrentId = next.currentId, nextMoves = next.unstable_moves, nextProps = _objectWithoutPropertiesLoose(next, ["currentId", "unstable_moves"]);
    if (prev.items && next.items) {
      var prevCurrentItem = findEnabledItemById(prev.items, prevCurrentId);
      var nextCurrentItem = findEnabledItemById(next.items, nextCurrentId);
      var prevGroupId = prevCurrentItem === null || prevCurrentItem === void 0 ? void 0 : prevCurrentItem.groupId;
      var nextGroupId = nextCurrentItem === null || nextCurrentItem === void 0 ? void 0 : nextCurrentItem.groupId;
      if (next.id === nextGroupId || next.id === prevGroupId) {
        return false;
      }
    }
    return useGroup.unstable_propsAreEqual(prevProps, nextProps);
  }, "propsAreEqual"),
  useProps: /* @__PURE__ */ __name(function useProps5(options, _ref) {
    var htmlRef = _ref.ref, htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref"]);
    var ref = (0, import_react6.useRef)(null);
    var id = options.id;
    useIsomorphicEffect(function() {
      var _options$registerGrou;
      if (!id) return void 0;
      (_options$registerGrou = options.registerGroup) === null || _options$registerGrou === void 0 ? void 0 : _options$registerGrou.call(options, {
        id,
        ref
      });
      return function() {
        var _options$unregisterGr;
        (_options$unregisterGr = options.unregisterGroup) === null || _options$unregisterGr === void 0 ? void 0 : _options$unregisterGr.call(options, id);
      };
    }, [id, options.registerGroup, options.unregisterGroup]);
    return _objectSpread2({
      ref: useForkRef(ref, htmlRef)
    }, htmlProps);
  }, "useProps")
});
var CompositeGroup = createComponent({
  as: "div",
  useHook: useCompositeGroup
});

// node_modules/reakit/es/Grid/GridRow.js
var import_react7 = __toESM(require_react());
var unstable_useGridRow = createHook({
  name: "GridRow",
  compose: useCompositeGroup,
  keys: GRID_ROW_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps6(_, htmlProps) {
    return _objectSpread2({
      role: "row"
    }, htmlProps);
  }, "useProps")
});
var unstable_GridRow = createComponent({
  as: "div",
  useHook: unstable_useGridRow
});

// node_modules/reakit/es/Combobox/ComboboxGridRow.js
var import_react8 = __toESM(require_react());
var unstable_useComboboxGridRow = createHook({
  name: "ComboboxGridRow",
  compose: unstable_useGridRow,
  keys: COMBOBOX_GRID_ROW_KEYS
});
var unstable_ComboboxGridRow = createComponent({
  as: "div",
  useHook: unstable_useComboboxGridRow
});

// node_modules/reakit/es/Grid/GridState.js
var import_react9 = __toESM(require_react());
function unstable_useGridState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var sealed = useSealedState(initialState);
  return useCompositeState(sealed);
}
__name(unstable_useGridState, "unstable_useGridState");

// node_modules/reakit/es/ComboboxBaseState-73fabcba.js
var import_react10 = __toESM(require_react());
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
__name(escapeRegExp, "escapeRegExp");
function getMatches(inputValue, values, limit, list, autoSelect, minValueLength) {
  if (limit === 0 || inputValue.length < minValueLength) {
    return [];
  }
  var length = limit === false ? void 0 : limit;
  if (!list) {
    return values.slice(0, length);
  }
  var regex = new RegExp(escapeRegExp(inputValue), "i");
  var matches = [];
  if (autoSelect) {
    var match = values.find(function(value2) {
      return value2.search(regex) === 0;
    });
    if (match) {
      matches.push(match);
    }
  }
  for (var _iterator = _createForOfIteratorHelperLoose(values), _step; !(_step = _iterator()).done; ) {
    var value = _step.value;
    if (length && matches.length >= length) {
      break;
    }
    if (value !== matches[0] && value.search(regex) !== -1) {
      matches.push(value);
    }
  }
  return matches;
}
__name(getMatches, "getMatches");
function useComboboxBaseState(composite, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$inputValue = _ref.inputValue, initialInputValue = _ref$inputValue === void 0 ? "" : _ref$inputValue, _ref$minValueLength = _ref.minValueLength, initialMinValueLength = _ref$minValueLength === void 0 ? 0 : _ref$minValueLength, _ref$values = _ref.values, initialValues = _ref$values === void 0 ? [] : _ref$values, _ref$limit = _ref.limit, initialLimit = _ref$limit === void 0 ? 10 : _ref$limit, _ref$list = _ref.list, initialList = _ref$list === void 0 ? !!initialValues.length : _ref$list, _ref$inline = _ref.inline, initialInline = _ref$inline === void 0 ? false : _ref$inline, _ref$autoSelect = _ref.autoSelect, initialAutoSelect = _ref$autoSelect === void 0 ? false : _ref$autoSelect;
  var valuesById = (0, import_react10.useRef)({});
  var _React$useState = (0, import_react10.useState)(initialInputValue), inputValue = _React$useState[0], setInputValue = _React$useState[1];
  var _React$useState2 = (0, import_react10.useState)(initialMinValueLength), minValueLength = _React$useState2[0], setMinValueLength = _React$useState2[1];
  var _React$useState3 = (0, import_react10.useState)(initialValues), values = _React$useState3[0], setValues = _React$useState3[1];
  var _React$useState4 = (0, import_react10.useState)(initialLimit), limit = _React$useState4[0], setLimit = _React$useState4[1];
  var _React$useState5 = (0, import_react10.useState)(initialList), list = _React$useState5[0], setList = _React$useState5[1];
  var _React$useState6 = (0, import_react10.useState)(initialInline), inline = _React$useState6[0], setInline = _React$useState6[1];
  var _React$useState7 = (0, import_react10.useState)(initialAutoSelect), autoSelect = _React$useState7[0], setAutoSelect = _React$useState7[1];
  var matches = (0, import_react10.useMemo)(function() {
    return getMatches(inputValue, values, limit, list, autoSelect, minValueLength);
  }, [inputValue, values, limit, list, autoSelect, minValueLength]);
  var currentValue = (0, import_react10.useMemo)(function() {
    return composite.currentId ? valuesById.current[composite.currentId] : void 0;
  }, [valuesById, composite.currentId]);
  var items = (0, import_react10.useMemo)(function() {
    composite.items.forEach(function(item) {
      if (item.id) {
        item.value = valuesById.current[item.id];
      }
    });
    return composite.items;
  }, [composite.items]);
  var registerItem = (0, import_react10.useCallback)(function(item) {
    composite.registerItem(item);
    if (item.id) {
      valuesById.current[item.id] = item.value;
    }
  }, [composite.registerItem]);
  var unregisterItem = (0, import_react10.useCallback)(function(id) {
    composite.unregisterItem(id);
    delete valuesById.current[id];
  }, [composite.unregisterItem]);
  return _objectSpread2(_objectSpread2({}, composite), {}, {
    menuRole: "listbox",
    items,
    registerItem,
    unregisterItem,
    visible: true,
    inputValue,
    minValueLength,
    currentValue,
    values,
    limit,
    matches,
    list,
    inline,
    autoSelect,
    setInputValue,
    setMinValueLength,
    setValues,
    setLimit,
    setList,
    setInline,
    setAutoSelect
  });
}
__name(useComboboxBaseState, "useComboboxBaseState");

// node_modules/reakit/es/Combobox/ComboboxListGridState.js
var import_react11 = __toESM(require_react());
function chunk(array, size) {
  var chunks = [];
  for (var i = 0, j = array.length; i < j; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
}
__name(chunk, "chunk");
function unstable_useComboboxListGridState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$colum = _useSealedState.columns, initialColumns = _useSealedState$colum === void 0 ? 1 : _useSealedState$colum, _useSealedState$curre = _useSealedState.currentId, currentId = _useSealedState$curre === void 0 ? null : _useSealedState$curre, _useSealedState$loop = _useSealedState.loop, loop = _useSealedState$loop === void 0 ? true : _useSealedState$loop, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["columns", "currentId", "loop"]);
  var _React$useState = (0, import_react11.useState)(initialColumns), columns = _React$useState[0], setColumns = _React$useState[1];
  var grid = unstable_useGridState(_objectSpread2(_objectSpread2({
    currentId,
    loop
  }, sealed), {}, {
    unstable_virtual: true,
    unstable_includesBaseElement: true
  }));
  var combobox = useComboboxBaseState(grid, sealed);
  var matches = (0, import_react11.useMemo)(function() {
    return chunk(combobox.matches, columns);
  }, [combobox.matches, columns]);
  return _objectSpread2(_objectSpread2({}, combobox), {}, {
    menuRole: "grid",
    columns,
    matches,
    setColumns
  });
}
__name(unstable_useComboboxListGridState, "unstable_useComboboxListGridState");

// node_modules/reakit/es/ComboboxPopoverState-fdc371b4.js
var import_react12 = __toESM(require_react());
function useComboboxPopoverState(combobox, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }
  var _ref2 = _ref, _ref2$gutter = _ref2.gutter, gutter = _ref2$gutter === void 0 ? 0 : _ref2$gutter, _ref2$placement = _ref2.placement, placement = _ref2$placement === void 0 ? "bottom-start" : _ref2$placement, initialState = _objectWithoutPropertiesLoose(_ref2, ["gutter", "placement"]);
  var popover = usePopoverState(_objectSpread2({
    gutter,
    placement
  }, initialState));
  var visible = popover.visible && combobox.inputValue.length >= combobox.minValueLength;
  (0, import_react12.useEffect)(function() {
    if (!visible) {
      combobox.reset();
    }
  }, [visible, combobox.reset]);
  return _objectSpread2(_objectSpread2(_objectSpread2({}, combobox), popover), {}, {
    visible
  });
}
__name(useComboboxPopoverState, "useComboboxPopoverState");

// node_modules/reakit/es/Combobox/ComboboxGridState.js
var import_react13 = __toESM(require_react());
function unstable_useComboboxGridState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var sealed = useSealedState(initialState);
  var combobox = unstable_useComboboxListGridState(sealed);
  return useComboboxPopoverState(combobox, sealed);
}
__name(unstable_useComboboxGridState, "unstable_useComboboxGridState");

// node_modules/reakit/es/Combobox/ComboboxList.js
var unstable_useComboboxList = createHook({
  name: "ComboboxList",
  compose: useBox,
  keys: COMBOBOX_LIST_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions3(_ref) {
    var _ref$menuRole = _ref.menuRole, menuRole = _ref$menuRole === void 0 ? "listbox" : _ref$menuRole, options = _objectWithoutPropertiesLoose(_ref, ["menuRole"]);
    return _objectSpread2({
      menuRole
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps7(options, htmlProps) {
    return _objectSpread2({
      role: options.menuRole,
      id: getMenuId(options.baseId)
    }, htmlProps);
  }, "useProps")
});
var unstable_ComboboxList = createComponent({
  as: "div",
  useHook: unstable_useComboboxList,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$1(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/combobox") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Combobox/ComboboxListState.js
var import_react14 = __toESM(require_react());
function unstable_useComboboxListState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$curre = _useSealedState.currentId, currentId = _useSealedState$curre === void 0 ? null : _useSealedState$curre, _useSealedState$orien = _useSealedState.orientation, orientation = _useSealedState$orien === void 0 ? "vertical" : _useSealedState$orien, _useSealedState$loop = _useSealedState.loop, loop = _useSealedState$loop === void 0 ? true : _useSealedState$loop, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["currentId", "orientation", "loop"]);
  var composite = useCompositeState(_objectSpread2(_objectSpread2({
    currentId,
    orientation,
    loop
  }, sealed), {}, {
    unstable_virtual: true,
    unstable_includesBaseElement: true
  }));
  return useComboboxBaseState(composite, sealed);
}
__name(unstable_useComboboxListState, "unstable_useComboboxListState");

// node_modules/reakit/es/Combobox/ComboboxOption.js
var import_react15 = __toESM(require_react());
var unstable_useComboboxOption = createHook({
  name: "ComboboxOption",
  compose: [unstable_useComboboxItem, useCompositeItem],
  keys: COMBOBOX_OPTION_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps8(_, htmlProps) {
    return _objectSpread2({
      role: "option"
    }, htmlProps);
  }, "useProps")
});
var unstable_ComboboxOption = createComponent({
  as: "div",
  memo: true,
  useHook: unstable_useComboboxOption
});

// node_modules/reakit/es/index.js
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/reakit/es/Combobox/ComboboxPopover.js
var import_react16 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var unstable_useComboboxPopover = createHook({
  name: "ComboboxPopover",
  compose: [unstable_useComboboxList, usePopover],
  keys: COMBOBOX_POPOVER_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions4(options) {
    return _objectSpread2(_objectSpread2({}, options), {}, {
      unstable_disclosureRef: options.unstable_referenceRef,
      unstable_autoFocusOnShow: false,
      unstable_autoFocusOnHide: false
    });
  }, "useOptions"),
  useComposeProps: /* @__PURE__ */ __name(function useComposeProps2(options, _ref) {
    var tabIndex = _ref.tabIndex, htmlProps = _objectWithoutPropertiesLoose(_ref, ["tabIndex"]);
    htmlProps = unstable_useComboboxList(options, htmlProps, true);
    htmlProps = usePopover(options, htmlProps, true);
    return _objectSpread2(_objectSpread2({}, htmlProps), {}, {
      tabIndex: tabIndex != null ? tabIndex : void 0
    });
  }, "useComposeProps")
});
var unstable_ComboboxPopover = createComponent({
  as: "div",
  useHook: unstable_useComboboxPopover,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$12(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/combobox") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Combobox/ComboboxState.js
var import_react17 = __toESM(require_react());
function unstable_useComboboxState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var sealed = useSealedState(initialState);
  var combobox = unstable_useComboboxListState(sealed);
  return useComboboxPopoverState(combobox, sealed);
}
__name(unstable_useComboboxState, "unstable_useComboboxState");

// node_modules/reakit/es/Composite/CompositeItemWidget.js
var import_react18 = __toESM(require_react());
function focusCurrentItem(widget, currentId) {
  if (currentId) {
    var _getDocument$getEleme;
    (_getDocument$getEleme = getDocument(widget).getElementById(currentId)) === null || _getDocument$getEleme === void 0 ? void 0 : _getDocument$getEleme.focus();
  }
}
__name(focusCurrentItem, "focusCurrentItem");
function getTextFieldValue(element) {
  return element.value;
}
__name(getTextFieldValue, "getTextFieldValue");
var unstable_useCompositeItemWidget = createHook({
  name: "CompositeItemWidget",
  compose: useRole,
  keys: COMPOSITE_ITEM_WIDGET_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps9(options, _ref) {
    var htmlOnFocus = _ref.onFocus, htmlOnBlur = _ref.onBlur, htmlOnKeyDown = _ref.onKeyDown, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onFocus", "onBlur", "onKeyDown"]);
    var initialValue = (0, import_react18.useRef)("");
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onFocus = (0, import_react18.useCallback)(function(event) {
      var _onFocusRef$current, _options$unstable_set;
      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      (_options$unstable_set = options.unstable_setHasActiveWidget) === null || _options$unstable_set === void 0 ? void 0 : _options$unstable_set.call(options, true);
      if (isTextField(event.currentTarget)) {
        initialValue.current = getTextFieldValue(event.currentTarget);
      }
    }, [options.unstable_setHasActiveWidget]);
    var onBlur = (0, import_react18.useCallback)(function(event) {
      var _onBlurRef$current, _options$unstable_set2;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      (_options$unstable_set2 = options.unstable_setHasActiveWidget) === null || _options$unstable_set2 === void 0 ? void 0 : _options$unstable_set2.call(options, false);
    }, [options.unstable_setHasActiveWidget]);
    var onKeyDown = (0, import_react18.useCallback)(function(event) {
      var _onKeyDownRef$current;
      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;
      if (!isSelfTarget(event)) return;
      if (event.nativeEvent.isComposing) return;
      var element = event.currentTarget;
      if (event.key === "Enter") {
        if (isTextField(element)) {
          var isMultilineTextField = element.tagName === "TEXTAREA";
          if (isMultilineTextField && event.shiftKey) return;
          event.preventDefault();
          focusCurrentItem(element, options.currentId);
        }
      } else if (event.key === "Escape") {
        focusCurrentItem(element, options.currentId);
        if (isTextField(element)) {
          setTextFieldValue(element, initialValue.current);
        }
      }
    }, [options.currentId]);
    return _objectSpread2({
      tabIndex: options.unstable_hasActiveWidget ? 0 : -1,
      "data-composite-item-widget": true,
      onFocus,
      onBlur,
      onKeyDown
    }, htmlProps);
  }, "useProps")
});
var unstable_CompositeItemWidget = createComponent({
  as: "div",
  useHook: unstable_useCompositeItemWidget
});

// node_modules/reakit/es/__keys-54ad6269.js
var FORM_STATE_KEYS = ["baseId", "unstable_idCountRef", "values", "touched", "messages", "errors", "validating", "valid", "submitting", "submitSucceed", "submitFailed", "setBaseId", "reset", "validate", "submit", "update", "blur", "push", "remove"];
var FORM_KEYS = FORM_STATE_KEYS;
var FORM_CHECKBOX_KEYS = [].concat(FORM_KEYS, ["name", "value"]);
var FORM_GROUP_KEYS = [].concat(FORM_KEYS, ["name"]);
var FORM_INPUT_KEYS = FORM_GROUP_KEYS;
var FORM_LABEL_KEYS = [].concat(FORM_INPUT_KEYS, ["label"]);
var FORM_MESSAGE_KEYS = FORM_INPUT_KEYS;
var FORM_PUSH_BUTTON_KEYS = [].concat(FORM_MESSAGE_KEYS, FORM_CHECKBOX_KEYS);
var FORM_RADIO_KEYS = FORM_PUSH_BUTTON_KEYS;
var FORM_RADIO_GROUP_KEYS = FORM_MESSAGE_KEYS;
var FORM_REMOVE_BUTTON_KEYS = [].concat(FORM_RADIO_GROUP_KEYS, ["index"]);
var FORM_SUBMIT_BUTTON_KEYS = FORM_KEYS;

// node_modules/reakit/es/Form/Form.js
var import_react19 = __toESM(require_react());
var unstable_useForm = createHook({
  name: "Form",
  compose: useRole,
  keys: FORM_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps10(options, _ref) {
    var htmlOnSubmit = _ref.onSubmit, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onSubmit"]);
    var onSubmitRef = useLiveRef(htmlOnSubmit);
    var onSubmit = (0, import_react19.useCallback)(function(event) {
      var _onSubmitRef$current, _options$submit;
      (_onSubmitRef$current = onSubmitRef.current) === null || _onSubmitRef$current === void 0 ? void 0 : _onSubmitRef$current.call(onSubmitRef, event);
      if (event.defaultPrevented) return;
      event.preventDefault();
      (_options$submit = options.submit) === null || _options$submit === void 0 ? void 0 : _options$submit.call(options);
    }, [options.submit]);
    return _objectSpread2({
      role: "form",
      noValidate: true,
      onSubmit
    }, htmlProps);
  }, "useProps")
});
var unstable_Form = createComponent({
  as: "form",
  useHook: unstable_useForm
});

// node_modules/reakit/es/getInputId-aa144169.js
function formatInputName(name, separator) {
  if (separator === void 0) {
    separator = ".";
  }
  if (Array.isArray(name)) return name.join(separator);
  return name;
}
__name(formatInputName, "formatInputName");
function getInputId(name, baseId, suffix) {
  if (suffix === void 0) {
    suffix = "";
  }
  if (baseId) {
    return baseId + "-" + formatInputName(name, "-") + suffix;
  }
  return void 0;
}
__name(getInputId, "getInputId");

// node_modules/reakit/es/getLabelId-3db05e97.js
function getLabelId(name, baseId) {
  return getInputId(name, baseId, "-label");
}
__name(getLabelId, "getLabelId");

// node_modules/reakit/es/Form/utils/getIn.js
function unstable_getIn(object, path, defaultValue) {
  if (typeof path === "string") {
    return object[path] == null ? defaultValue : object[path];
  }
  var result = object;
  for (var _iterator = _createForOfIteratorHelperLoose(path), _step; !(_step = _iterator()).done; ) {
    var key = _step.value;
    if (!(key in result)) return defaultValue;
    result = result[key];
  }
  if (result == null) {
    return defaultValue;
  }
  return result;
}
__name(unstable_getIn, "unstable_getIn");

// node_modules/reakit/es/shouldShowError-e8a86b53.js
function getMessageId(name, baseId) {
  return getInputId(name, baseId, "-message");
}
__name(getMessageId, "getMessageId");
function shouldShowError(_ref, name) {
  var touched = _ref.touched, errors = _ref.errors;
  return !!(unstable_getIn(touched, name) && unstable_getIn(errors, name));
}
__name(shouldShowError, "shouldShowError");

// node_modules/reakit/es/Form/FormCheckbox.js
var import_react20 = __toESM(require_react());
var unstable_useFormCheckbox = createHook({
  name: "FormCheckbox",
  compose: useCheckbox,
  keys: FORM_CHECKBOX_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions5(options, htmlProps) {
    var name = options.name || htmlProps.name;
    var value = typeof options.value !== "undefined" ? options.value : htmlProps.value;
    var state = unstable_getIn(options.values, name);
    var setState = /* @__PURE__ */ __name(function setState2(val) {
      return options.update(name, val);
    }, "setState");
    return _objectSpread2(_objectSpread2({}, options), {}, {
      state,
      setState,
      name,
      value
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps11(options, _ref) {
    var htmlOnBlur = _ref.onBlur, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onBlur"]);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var isBoolean = typeof options.value === "undefined";
    var onBlur = (0, import_react20.useCallback)(function(event) {
      var _onBlurRef$current, _options$blur;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      (_options$blur = options.blur) === null || _options$blur === void 0 ? void 0 : _options$blur.call(options, options.name);
    }, [options.blur, options.name]);
    return _objectSpread2(_objectSpread2({
      "aria-invalid": shouldShowError(options, options.name),
      name: formatInputName(options.name),
      onBlur
    }, isBoolean ? {
      id: getInputId(options.name, options.baseId),
      "aria-describedby": getMessageId(options.name, options.baseId),
      "aria-labelledby": getLabelId(options.name, options.baseId)
    } : {}), htmlProps);
  }, "useProps")
});
var unstable_FormCheckbox = createComponent({
  as: "input",
  memo: true,
  useHook: unstable_useFormCheckbox
});

// node_modules/reakit/es/Form/FormGroup.js
var unstable_useFormGroup = createHook({
  name: "FormGroup",
  compose: useGroup,
  keys: FORM_GROUP_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps12(options, htmlProps) {
    return _objectSpread2({
      id: getInputId(options.name, options.baseId),
      tabIndex: -1,
      "aria-describedby": getMessageId(options.name, options.baseId),
      "aria-labelledby": getLabelId(options.name, options.baseId),
      "aria-invalid": shouldShowError(options, options.name)
    }, htmlProps);
  }, "useProps")
});
var unstable_FormGroup = createComponent({
  as: "fieldset",
  useHook: unstable_useFormGroup
});

// node_modules/reakit/es/Input/Input.js
var import_react21 = __toESM(require_react());
var INPUT_KEYS = [];
var useInput = createHook({
  name: "Input",
  compose: useTabbable,
  keys: INPUT_KEYS
});
var Input = createComponent({
  as: "input",
  memo: true,
  useHook: useInput
});

// node_modules/reakit/es/Form/FormInput.js
var import_react22 = __toESM(require_react());
var unstable_useFormInput = createHook({
  name: "FormInput",
  compose: useInput,
  keys: FORM_INPUT_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions6(options, _ref) {
    var name = _ref.name;
    return _objectSpread2(_objectSpread2({}, options), {}, {
      name: options.name || name
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps13(options, _ref2) {
    var htmlOnChange = _ref2.onChange, htmlOnBlur = _ref2.onBlur, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onChange", "onBlur"]);
    var onChangeRef = useLiveRef(htmlOnChange);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var onChange = (0, import_react22.useCallback)(function(event) {
      var _onChangeRef$current, _options$update;
      (_onChangeRef$current = onChangeRef.current) === null || _onChangeRef$current === void 0 ? void 0 : _onChangeRef$current.call(onChangeRef, event);
      if (event.defaultPrevented) return;
      (_options$update = options.update) === null || _options$update === void 0 ? void 0 : _options$update.call(options, options.name, event.target.value);
    }, [options.update, options.name]);
    var onBlur = (0, import_react22.useCallback)(function(event) {
      var _onBlurRef$current, _options$blur;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      (_options$blur = options.blur) === null || _options$blur === void 0 ? void 0 : _options$blur.call(options, options.name);
    }, [options.blur, options.name]);
    return _objectSpread2({
      id: getInputId(options.name, options.baseId),
      name: formatInputName(options.name),
      value: unstable_getIn(options.values, options.name, ""),
      "aria-describedby": getMessageId(options.name, options.baseId),
      "aria-labelledby": getLabelId(options.name, options.baseId),
      "aria-invalid": shouldShowError(options, options.name),
      onChange,
      onBlur
    }, htmlProps);
  }, "useProps")
});
var unstable_FormInput = createComponent({
  as: "input",
  memo: true,
  useHook: unstable_useFormInput
});

// node_modules/reakit/es/Form/FormLabel.js
var unstable_useFormLabel = createHook({
  name: "FormLabel",
  compose: useRole,
  keys: FORM_LABEL_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps14(options, htmlProps) {
    return _objectSpread2({
      children: options.label,
      id: getLabelId(options.name, options.baseId),
      htmlFor: getInputId(options.name, options.baseId)
    }, htmlProps);
  }, "useProps")
});
var unstable_FormLabel = createComponent({
  as: "label",
  memo: true,
  useHook: unstable_useFormLabel
});

// node_modules/reakit/es/Form/FormMessage.js
function shouldShowMessage(_ref, name) {
  var touched = _ref.touched, messages = _ref.messages;
  return !!(unstable_getIn(touched, name) && unstable_getIn(messages, name));
}
__name(shouldShowMessage, "shouldShowMessage");
var unstable_useFormMessage = createHook({
  name: "FormMessage",
  compose: useRole,
  keys: FORM_MESSAGE_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps15(options, htmlProps) {
    var children = shouldShowError(options, options.name) ? unstable_getIn(options.errors, options.name) : void 0;
    children = children || (shouldShowMessage(options, options.name) ? unstable_getIn(options.messages, options.name) : void 0);
    return _objectSpread2({
      role: "alert",
      id: getMessageId(options.name, options.baseId),
      children
    }, htmlProps);
  }, "useProps")
});
var unstable_FormMessage = createComponent({
  as: "div",
  memo: true,
  useHook: unstable_useFormMessage
});

// node_modules/reakit/es/getPushButtonId-9f434755.js
function getPushButtonId(name, baseId) {
  return getInputId(name, baseId, "-push");
}
__name(getPushButtonId, "getPushButtonId");

// node_modules/reakit/es/Form/FormPushButton.js
var import_react23 = __toESM(require_react());
var unstable_useFormPushButton = createHook({
  name: "FormPushButton",
  compose: useButton,
  keys: FORM_PUSH_BUTTON_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions7(options, _ref) {
    var _options$value;
    var name = _ref.name, value = _ref.value;
    return _objectSpread2(_objectSpread2({}, options), {}, {
      name: options.name || name,
      value: (_options$value = options.value) != null ? _options$value : value
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps16(options, _ref2) {
    var htmlOnClick = _ref2.onClick, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onClick"]);
    var onClickRef = useLiveRef(htmlOnClick);
    var onClick = (0, import_react23.useCallback)(function(event) {
      var _onClickRef$current, _options$push;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      (_options$push = options.push) === null || _options$push === void 0 ? void 0 : _options$push.call(options, options.name, options.value);
      var _unstable_getIn = unstable_getIn(options.values, options.name, []), length = _unstable_getIn.length;
      var inputId = getInputId(formatInputName(options.name, "-") + "-" + length, options.baseId);
      if (!inputId) return;
      var element = event.currentTarget;
      window.requestAnimationFrame(function() {
        var selector = '[id^="' + inputId + '"]';
        var document = getDocument(element);
        var input = document.querySelector(selector);
        input === null || input === void 0 ? void 0 : input.focus();
      });
    }, [options.push, options.name, options.value, options.values, options.baseId]);
    return _objectSpread2({
      id: getPushButtonId(options.name, options.baseId),
      onClick
    }, htmlProps);
  }, "useProps")
});
var unstable_FormPushButton = createComponent({
  as: "button",
  memo: true,
  useHook: unstable_useFormPushButton
});

// node_modules/reakit/es/Form/FormRadioGroup.js
var import_react24 = __toESM(require_react());
var FormRadioGroupContext = (0, import_react24.createContext)(null);
var unstable_useFormRadioGroup = createHook({
  name: "FormRadioGroup",
  compose: unstable_useFormGroup,
  keys: FORM_RADIO_GROUP_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions8(options, _ref) {
    var name = _ref.name;
    return _objectSpread2(_objectSpread2({}, options), {}, {
      name: options.name || name
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps17(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["wrapElement"]);
    var id = getInputId(options.name, options.baseId);
    var composite = useCompositeState({
      baseId: id,
      loop: true
    });
    var providerValue = (0, import_react24.useMemo)(function() {
      return composite;
    }, Object.values(composite));
    var wrapElement = (0, import_react24.useCallback)(function(element) {
      element = (0, import_react24.createElement)(FormRadioGroupContext.Provider, {
        value: providerValue
      }, element);
      if (htmlWrapElement) {
        return htmlWrapElement(element);
      }
      return element;
    }, [providerValue, htmlWrapElement]);
    return _objectSpread2({
      role: "radiogroup",
      wrapElement
    }, htmlProps);
  }, "useProps")
});
var unstable_FormRadioGroup = createComponent({
  as: "fieldset",
  useHook: unstable_useFormRadioGroup
});

// node_modules/reakit/es/Form/FormRadio.js
var import_react25 = __toESM(require_react());
var unstable_useFormRadio = createHook({
  name: "FormRadio",
  compose: useRadio,
  keys: FORM_RADIO_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions9(options, htmlProps) {
    var name = options.name || htmlProps.name;
    var value = typeof options.value !== "undefined" ? options.value : htmlProps.value;
    var composite = (0, import_react25.useContext)(FormRadioGroupContext);
    var currentChecked = unstable_getIn(options.values, name);
    var checked = currentChecked === value;
    if (!composite) {
      throw new Error("Missing FormRadioGroup");
    }
    return _objectSpread2(_objectSpread2(_objectSpread2({}, options), composite), {}, {
      checked,
      name,
      value
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps18(options, _ref) {
    var htmlOnChange = _ref.onChange, htmlOnBlur = _ref.onBlur, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onChange", "onBlur"]);
    var onChangeRef = useLiveRef(htmlOnChange);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var onChange = (0, import_react25.useCallback)(function(event) {
      var _onChangeRef$current, _options$update;
      (_onChangeRef$current = onChangeRef.current) === null || _onChangeRef$current === void 0 ? void 0 : _onChangeRef$current.call(onChangeRef, event);
      if (event.defaultPrevented) return;
      (_options$update = options.update) === null || _options$update === void 0 ? void 0 : _options$update.call(options, options.name, options.value);
    }, [options.update, options.name, options.value]);
    var onBlur = (0, import_react25.useCallback)(function(event) {
      var _onBlurRef$current, _options$blur;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      (_options$blur = options.blur) === null || _options$blur === void 0 ? void 0 : _options$blur.call(options, options.name);
    }, [options.blur, options.name]);
    return _objectSpread2({
      name: formatInputName(options.name),
      onChange,
      onBlur
    }, htmlProps);
  }, "useProps")
});
var unstable_FormRadio = createComponent({
  as: "input",
  memo: true,
  useHook: unstable_useFormRadio
});

// node_modules/reakit/es/Form/FormRemoveButton.js
var import_react26 = __toESM(require_react());
var unstable_useFormRemoveButton = createHook({
  name: "FormRemoveButton",
  compose: useButton,
  keys: FORM_REMOVE_BUTTON_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions10(options, _ref) {
    var name = _ref.name;
    return _objectSpread2(_objectSpread2({}, options), {}, {
      name: options.name || name
    });
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps19(options, _ref2) {
    var htmlOnClick = _ref2.onClick, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onClick"]);
    var onClickRef = useLiveRef(htmlOnClick);
    var onClick = (0, import_react26.useCallback)(function(event) {
      var _onClickRef$current, _options$remove;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      (_options$remove = options.remove) === null || _options$remove === void 0 ? void 0 : _options$remove.call(options, options.name, options.index);
      var inputId = getInputId(options.name, options.baseId);
      if (!inputId) return;
      var document = getDocument(event.currentTarget);
      window.requestAnimationFrame(function() {
        var selector = '[id^="' + inputId + '-"]';
        var inputs = document.querySelectorAll(selector);
        if (inputs.length) {
          var inputsArray = Array.from(inputs);
          var nextIdx = inputsArray.reduce(function(final, input2) {
            var match = input2.id.match(new RegExp(inputId + "-([0-9]+)"));
            if (!match) return final;
            var idx = match[1];
            if (Number(idx) > final && options.index >= final) {
              return Number(idx);
            }
            return final;
          }, 0);
          var nextSelector = '[id^="' + inputId + "-" + nextIdx + '"]';
          var input = document.querySelector(nextSelector);
          if (input) {
            input.focus();
            return;
          }
        }
        var pushButtonId = getPushButtonId(options.name, options.baseId);
        if (pushButtonId) {
          var pushButton = document.getElementById(pushButtonId);
          pushButton === null || pushButton === void 0 ? void 0 : pushButton.focus();
        }
      });
    }, [options.remove, options.name, options.index, options.baseId]);
    return _objectSpread2({
      onClick
    }, htmlProps);
  }, "useProps")
});
var unstable_FormRemoveButton = createComponent({
  as: "button",
  memo: true,
  useHook: unstable_useFormRemoveButton
});

// node_modules/reakit-utils/es/isPromise.js
function isPromise(arg) {
  return Boolean(arg && "then" in arg && arg.then);
}
__name(isPromise, "isPromise");

// node_modules/reakit/es/Form/FormState.js
var import_react27 = __toESM(require_react());

// node_modules/reakit/es/Form/utils/setAllIn.js
function unstable_setAllIn(object, value) {
  var typedObject = object;
  var result = {};
  var keys = Object.keys(object);
  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    var val = typedObject[key];
    if (Array.isArray(val)) {
      result[key] = val.map(function(v) {
        if (isObject(v)) {
          return unstable_setAllIn(v, value);
        }
        return value;
      });
    } else if (isObject(val)) {
      result[key] = unstable_setAllIn(val, value);
    } else {
      result[key] = value;
    }
  }
  return result;
}
__name(unstable_setAllIn, "unstable_setAllIn");

// node_modules/reakit-utils/es/isInteger.js
function isInteger(arg) {
  if (typeof arg === "number") {
    return Math.floor(arg) === arg;
  }
  return String(Math.floor(Number(arg))) === arg;
}
__name(isInteger, "isInteger");

// node_modules/reakit/es/Form/utils/setIn.js
function unstable_setIn(object, path, value) {
  var _objectSpread2$1;
  var pathArray = toArray(path);
  var key = pathArray[0], keys = pathArray.slice(1);
  if (key == null) return object;
  var obj = isInteger(key) ? object || [] : object || {};
  var result = keys.length ? unstable_setIn(obj[key], keys, value) : value;
  if (isInteger(key)) {
    if (object) {
      return [].concat(object.slice(0, Number(key)), [result], object.slice(Number(key) + 1));
    }
    return [result];
  }
  return _objectSpread2(_objectSpread2({}, object), {}, (_objectSpread2$1 = {}, _objectSpread2$1[key] = result, _objectSpread2$1));
}
__name(unstable_setIn, "unstable_setIn");

// node_modules/reakit/es/Form/FormState.js
function filterAllEmpty(object) {
  if (Array.isArray(object)) {
    return object.filter(function(value2) {
      if (isPlainObject(value2) || Array.isArray(value2)) {
        return filterAllEmpty(value2);
      }
      return true;
    });
  }
  var result = {};
  var keys = Object.keys(object);
  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    var k = key;
    var value = object[k];
    result[k] = isPlainObject(value) || Array.isArray(value) ? filterAllEmpty(value) : object[k];
  }
  return result;
}
__name(filterAllEmpty, "filterAllEmpty");
function hasMessages(errors) {
  return isObject(errors) && !isEmpty(errors);
}
__name(hasMessages, "hasMessages");
function getMessages(stateMessages, actionMessages) {
  return !isEmpty(actionMessages) ? actionMessages : isEmpty(stateMessages) ? stateMessages : {};
}
__name(getMessages, "getMessages");
function reducer(state, action) {
  switch (action.type) {
    case "reset": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        values: state.initialValues,
        touched: {},
        errors: {},
        messages: {},
        valid: true,
        validating: false,
        submitting: false,
        submitFailed: 0,
        submitSucceed: 0
      });
    }
    case "startValidate": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        validating: true
      });
    }
    case "endValidate": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        validating: false,
        errors: getMessages(state.errors, action.errors),
        messages: getMessages(state.messages, action.messages),
        valid: !hasMessages(action.errors)
      });
    }
    case "startSubmit": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        // @ts-ignore TS bug
        touched: unstable_setAllIn(state.values, true),
        submitting: true
      });
    }
    case "endSubmit": {
      var valid = !hasMessages(action.errors);
      return _objectSpread2(_objectSpread2({}, state), {}, {
        valid,
        submitting: false,
        errors: getMessages(state.errors, action.errors),
        messages: getMessages(state.messages, action.messages),
        submitSucceed: valid ? state.submitSucceed + 1 : state.submitSucceed,
        submitFailed: valid ? state.submitFailed : state.submitFailed + 1
      });
    }
    case "update": {
      var _name = action.name, _value = action.value;
      var nextValue = typeof _value === "function" ? _value(unstable_getIn(state.values, _name)) : _value;
      return _objectSpread2(_objectSpread2({}, state), {}, {
        values: unstable_setIn(state.values, _name, nextValue != null ? nextValue : "")
      });
    }
    case "blur": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        touched: unstable_setIn(state.touched, action.name, true)
      });
    }
    case "push": {
      var array = unstable_getIn(state.values, action.name, []);
      return _objectSpread2(_objectSpread2({}, state), {}, {
        values: unstable_setIn(state.values, action.name, [].concat(array, [action.value]))
      });
    }
    case "remove": {
      var _array = unstable_getIn(state.values, action.name, []).slice();
      delete _array[action.index];
      return _objectSpread2(_objectSpread2({}, state), {}, {
        values: unstable_setIn(state.values, action.name, _array)
      });
    }
    default: {
      throw new Error();
    }
  }
}
__name(reducer, "reducer");
function unstable_useFormState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$value = _useSealedState.values, initialValues = _useSealedState$value === void 0 ? {} : _useSealedState$value, _useSealedState$valid = _useSealedState.validateOnBlur, validateOnBlur = _useSealedState$valid === void 0 ? true : _useSealedState$valid, _useSealedState$valid2 = _useSealedState.validateOnChange, validateOnChange = _useSealedState$valid2 === void 0 ? true : _useSealedState$valid2, _useSealedState$reset = _useSealedState.resetOnSubmitSucceed, resetOnSubmitSucceed = _useSealedState$reset === void 0 ? false : _useSealedState$reset, _useSealedState$reset2 = _useSealedState.resetOnUnmount, resetOnUnmount = _useSealedState$reset2 === void 0 ? true : _useSealedState$reset2, onValidate = _useSealedState.onValidate, onSubmit = _useSealedState.onSubmit, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["values", "validateOnBlur", "validateOnChange", "resetOnSubmitSucceed", "resetOnUnmount", "onValidate", "onSubmit"]);
  var onValidateRef = useLiveRef(typeof initialState !== "function" ? initialState.onValidate : onValidate);
  var onSubmitRef = useLiveRef(typeof initialState !== "function" ? initialState.onSubmit : onSubmit);
  var id = unstable_useIdState(sealed);
  var _React$useReducer = (0, import_react27.useReducer)(reducer, {
    initialValues,
    values: initialValues,
    touched: {},
    errors: {},
    messages: {},
    valid: true,
    validating: false,
    submitting: false,
    submitFailed: 0,
    submitSucceed: 0
  }), _React$useReducer$ = _React$useReducer[0], _ = _React$useReducer$.initialValues, state = _objectWithoutPropertiesLoose(_React$useReducer$, ["initialValues"]), dispatch = _React$useReducer[1];
  var validate = (0, import_react27.useCallback)(function(vals) {
    if (vals === void 0) {
      vals = state.values;
    }
    return new Promise(function(resolve) {
      if (onValidateRef.current) {
        var response = onValidateRef.current(vals);
        if (isPromise(response)) {
          dispatch({
            type: "startValidate"
          });
        }
        resolve(Promise.resolve(response).then(function(messages) {
          dispatch({
            type: "endValidate",
            messages
          });
          return messages;
        }));
      } else {
        resolve(void 0);
      }
    }).catch(function(errors) {
      dispatch({
        type: "endValidate",
        errors
      });
      throw errors;
    });
  }, [state.values]);
  useUpdateEffect(function() {
    if (validateOnChange) {
      validate().catch(function() {
      });
    }
  }, [validate, validateOnChange]);
  (0, import_react27.useEffect)(function() {
    if (resetOnUnmount) {
      return function() {
        dispatch({
          type: "reset"
        });
      };
    }
    return void 0;
  }, [resetOnUnmount]);
  return _objectSpread2(_objectSpread2(_objectSpread2({}, id), state), {}, {
    values: state.values,
    validate,
    reset: (0, import_react27.useCallback)(function() {
      return dispatch({
        type: "reset"
      });
    }, []),
    submit: (0, import_react27.useCallback)(function() {
      dispatch({
        type: "startSubmit"
      });
      return validate().then(function(validateMessages) {
        if (onSubmitRef.current) {
          return Promise.resolve(onSubmitRef.current(filterAllEmpty(state.values))).then(function(submitMessages) {
            var messages = _objectSpread2(_objectSpread2({}, validateMessages), submitMessages);
            dispatch({
              type: "endSubmit",
              messages
            });
          });
        }
        return dispatch({
          type: "endSubmit",
          messages: validateMessages
        });
      }).then(function() {
        if (resetOnSubmitSucceed) {
          dispatch({
            type: "reset"
          });
        }
      }).catch(function(errors) {
        dispatch({
          type: "endSubmit",
          errors
        });
      });
    }, [validate]),
    update: (0, import_react27.useCallback)(function(name, value) {
      return dispatch({
        type: "update",
        name,
        value
      });
    }, []),
    blur: (0, import_react27.useCallback)(function(name) {
      dispatch({
        type: "blur",
        name
      });
      if (validateOnBlur) {
        validate().catch(function() {
        });
      }
    }, [validate]),
    push: (0, import_react27.useCallback)(function(name, value) {
      return dispatch({
        type: "push",
        name,
        value
      });
    }, []),
    remove: (0, import_react27.useCallback)(function(name, index) {
      return dispatch({
        type: "remove",
        name,
        index
      });
    }, [])
  });
}
__name(unstable_useFormState, "unstable_useFormState");

// node_modules/reakit/es/Form/FormSubmitButton.js
var import_react28 = __toESM(require_react());
function getFirstInvalidInput(baseId, target) {
  var document = getDocument(target);
  var selector = "[aria-invalid=true][id^=" + baseId + "]";
  return document.querySelector(selector);
}
__name(getFirstInvalidInput, "getFirstInvalidInput");
var unstable_useFormSubmitButton = createHook({
  name: "FormSubmitButton",
  compose: useButton,
  keys: FORM_SUBMIT_BUTTON_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions11(options) {
    return _objectSpread2({
      disabled: options.submitting
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps20(options, _ref) {
    var htmlOnClick = _ref.onClick, htmlProps = _objectWithoutPropertiesLoose(_ref, ["onClick"]);
    var onClickRef = useLiveRef(htmlOnClick);
    var onClick = (0, import_react28.useCallback)(function(event) {
      var _onClickRef$current;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      var element = event.currentTarget;
      window.requestAnimationFrame(function() {
        var input = getFirstInvalidInput(options.baseId, element);
        input === null || input === void 0 ? void 0 : input.focus();
        if (input && "select" in input) {
          input.select();
        }
      });
    }, [options.baseId]);
    return _objectSpread2({
      type: "submit",
      onClick
    }, htmlProps);
  }, "useProps")
});
var unstable_FormSubmitButton = createComponent({
  as: "button",
  memo: true,
  useHook: unstable_useFormSubmitButton
});

// node_modules/reakit/es/Grid/Grid.js
var import_react29 = __toESM(require_react());
var unstable_useGrid = createHook({
  name: "Grid",
  compose: useComposite,
  keys: GRID_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps21(_, htmlProps) {
    return _objectSpread2({
      role: "grid"
    }, htmlProps);
  }, "useProps")
});
var unstable_Grid = createComponent({
  as: "div",
  useHook: unstable_useGrid,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$13(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/grid") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Radio/RadioGroup.js
var import_react30 = __toESM(require_react());
var useRadioGroup = createHook({
  name: "RadioGroup",
  compose: useComposite,
  keys: RADIO_GROUP_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps22(_, htmlProps) {
    return _objectSpread2({
      role: "radiogroup"
    }, htmlProps);
  }, "useProps")
});
var RadioGroup = createComponent({
  as: "div",
  useHook: useRadioGroup,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$14(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/radio") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Radio/RadioState.js
var import_react31 = __toESM(require_react());
function useRadioState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), initialValue = _useSealedState.state, _useSealedState$loop = _useSealedState.loop, loop = _useSealedState$loop === void 0 ? true : _useSealedState$loop, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["state", "loop"]);
  var _React$useState = (0, import_react31.useState)(initialValue), state = _React$useState[0], setState = _React$useState[1];
  var composite = useCompositeState(_objectSpread2(_objectSpread2({}, sealed), {}, {
    loop
  }));
  return _objectSpread2(_objectSpread2({}, composite), {}, {
    state,
    setState
  });
}
__name(useRadioState, "useRadioState");

// node_modules/reakit-utils/es/createOnKeyDown.js
function createOnKeyDown(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, keyMap = _ref.keyMap, onKey = _ref.onKey, stopPropagation = _ref.stopPropagation, onKeyDown = _ref.onKeyDown, _ref$shouldKeyDown = _ref.shouldKeyDown, shouldKeyDown = _ref$shouldKeyDown === void 0 ? function() {
    return true;
  } : _ref$shouldKeyDown, _ref$preventDefault = _ref.preventDefault, preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault;
  return function(event) {
    if (!keyMap) return;
    var finalKeyMap = typeof keyMap === "function" ? keyMap(event) : keyMap;
    var shouldPreventDefault = typeof preventDefault === "function" ? preventDefault(event) : preventDefault;
    var shouldStopPropagation = typeof stopPropagation === "function" ? stopPropagation(event) : stopPropagation;
    if (event.key in finalKeyMap) {
      var action = finalKeyMap[event.key];
      if (typeof action === "function" && shouldKeyDown(event)) {
        if (shouldPreventDefault) event.preventDefault();
        if (shouldStopPropagation) event.stopPropagation();
        if (onKey) onKey(event);
        action(event);
        return;
      }
    }
    if (onKeyDown && "current" in onKeyDown) {
      var _onKeyDown$current;
      (_onKeyDown$current = onKeyDown.current) === null || _onKeyDown$current === void 0 ? void 0 : _onKeyDown$current.call(onKeyDown, event);
    } else {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
    }
  };
}
__name(createOnKeyDown, "createOnKeyDown");

// node_modules/reakit/es/Rover/Rover.js
var import_react32 = __toESM(require_react());
var ROVER_STATE_KEYS = ["baseId", "unstable_idCountRef", "orientation", "stops", "currentId", "unstable_pastId", "unstable_moves", "loop", "setBaseId", "register", "unregister", "move", "next", "previous", "first", "last", "unstable_reset", "unstable_orientate"];
var ROVER_KEYS = [].concat(ROVER_STATE_KEYS, ["stopId"]);
function useAllCallbacks() {
  for (var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++) {
    callbacks[_key] = arguments[_key];
  }
  return (0, import_react32.useCallback)(function() {
    var fns = callbacks.filter(Boolean);
    for (var _iterator = _createForOfIteratorHelperLoose(fns), _step; !(_step = _iterator()).done; ) {
      var callback = _step.value;
      callback.apply(void 0, arguments);
    }
  }, callbacks);
}
__name(useAllCallbacks, "useAllCallbacks");
var useRover = createHook({
  name: "Rover",
  compose: [useClickable, unstable_useId],
  keys: ROVER_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps23(options, _ref) {
    var htmlRef = _ref.ref, _ref$tabIndex = _ref.tabIndex, htmlTabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, htmlOnFocus = _ref.onFocus, htmlOnKeyDown = _ref.onKeyDown, htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref", "tabIndex", "onFocus", "onKeyDown"]);
    var ref = (0, import_react32.useRef)(null);
    var id = options.stopId || options.id;
    var trulyDisabled = options.disabled && !options.focusable;
    var noFocused = options.currentId == null;
    var focused = options.currentId === id;
    var isFirst = (options.stops || [])[0] && options.stops[0].id === id;
    var shouldTabIndex = focused || isFirst && noFocused;
    (0, import_react32.useEffect)(function() {
      if (trulyDisabled || !id) return void 0;
      options.register && options.register(id, ref);
      return function() {
        return options.unregister && options.unregister(id);
      };
    }, [id, trulyDisabled, options.register, options.unregister]);
    (0, import_react32.useEffect)(function() {
      var rover = ref.current;
      if (!rover) {
        true ? warning(true, "Can't focus rover component because `ref` wasn't passed to component.", "See https://reakit.io/docs/rover") : void 0;
        return;
      }
      if (options.unstable_moves && focused && !hasFocusWithin(rover)) {
        rover.focus();
      }
    }, [focused, options.unstable_moves]);
    var onFocus = (0, import_react32.useCallback)(function(event) {
      if (!id || !event.currentTarget.contains(event.target)) return;
      options.move(id, true);
    }, [options.move, id]);
    var onKeyDown = (0, import_react32.useMemo)(function() {
      return createOnKeyDown({
        onKeyDown: htmlOnKeyDown,
        stopPropagation: true,
        shouldKeyDown: /* @__PURE__ */ __name(function shouldKeyDown(event) {
          return (
            // Ignore portals
            // https://github.com/facebook/react/issues/11387
            event.currentTarget.contains(event.target)
          );
        }, "shouldKeyDown"),
        keyMap: {
          ArrowUp: options.orientation !== "horizontal" && options.previous,
          ArrowRight: options.orientation !== "vertical" && options.next,
          ArrowDown: options.orientation !== "horizontal" && options.next,
          ArrowLeft: options.orientation !== "vertical" && options.previous,
          Home: options.first,
          End: options.last,
          PageUp: options.first,
          PageDown: options.last
        }
      });
    }, [htmlOnKeyDown, options.orientation, options.previous, options.next, options.first, options.last]);
    return _objectSpread2({
      id,
      ref: useForkRef(ref, htmlRef),
      tabIndex: shouldTabIndex ? htmlTabIndex : -1,
      onFocus: useAllCallbacks(onFocus, htmlOnFocus),
      onKeyDown
    }, htmlProps);
  }, "useProps")
});
var Rover = createComponent({
  as: "button",
  useHook: useRover
});

// node_modules/reakit/es/Rover/RoverState.js
var import_react33 = __toESM(require_react());
function reducer2(state, action) {
  var stops = state.stops, currentId = state.currentId, pastId = state.unstable_pastId, moves = state.unstable_moves, loop = state.loop;
  switch (action.type) {
    case "register": {
      var _id = action.id, _ref = action.ref;
      if (stops.length === 0) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          stops: [{
            id: _id,
            ref: _ref
          }]
        });
      }
      var index = stops.findIndex(function(stop2) {
        return stop2.id === _id;
      });
      if (index >= 0) {
        return state;
      }
      var indexToInsertAt = stops.findIndex(function(stop2) {
        if (!stop2.ref.current || !_ref.current) return false;
        return Boolean(stop2.ref.current.compareDocumentPosition(_ref.current) & Node.DOCUMENT_POSITION_PRECEDING);
      });
      if (indexToInsertAt === -1) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          stops: [].concat(stops, [{
            id: _id,
            ref: _ref
          }])
        });
      }
      return _objectSpread2(_objectSpread2({}, state), {}, {
        stops: [].concat(stops.slice(0, indexToInsertAt), [{
          id: _id,
          ref: _ref
        }], stops.slice(indexToInsertAt))
      });
    }
    case "unregister": {
      var _id2 = action.id;
      var nextStops = stops.filter(function(stop2) {
        return stop2.id !== _id2;
      });
      if (nextStops.length === stops.length) {
        return state;
      }
      return _objectSpread2(_objectSpread2({}, state), {}, {
        stops: nextStops,
        unstable_pastId: pastId && pastId === _id2 ? null : pastId,
        currentId: currentId && currentId === _id2 ? null : currentId
      });
    }
    case "move": {
      var _id3 = action.id, silent = action.silent;
      var nextMoves = silent ? moves : moves + 1;
      if (_id3 === null) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          currentId: null,
          unstable_pastId: currentId,
          unstable_moves: nextMoves
        });
      }
      var _index = stops.findIndex(function(stop2) {
        return stop2.id === _id3;
      });
      if (_index === -1) {
        return state;
      }
      if (stops[_index].id === currentId) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          unstable_moves: nextMoves
        });
      }
      return _objectSpread2(_objectSpread2({}, state), {}, {
        currentId: stops[_index].id,
        unstable_pastId: currentId,
        unstable_moves: nextMoves
      });
    }
    case "next": {
      if (currentId == null) {
        return reducer2(state, {
          type: "move",
          id: stops[0] && stops[0].id
        });
      }
      var _index2 = stops.findIndex(function(stop2) {
        return stop2.id === currentId;
      });
      var reorderedStops = [].concat(stops.slice(_index2 + 1), loop ? stops.slice(0, _index2) : []);
      var nextIndex = reorderedStops.findIndex(function(stop2) {
        return stop2.id === currentId;
      }) + 1;
      return reducer2(state, {
        type: "move",
        id: reorderedStops[nextIndex] && reorderedStops[nextIndex].id
      });
    }
    case "previous": {
      var _reducer = reducer2(_objectSpread2(_objectSpread2({}, state), {}, {
        stops: stops.slice().reverse()
      }), {
        type: "next"
      }), _ = _reducer.stops, nextState = _objectWithoutPropertiesLoose(_reducer, ["stops"]);
      return _objectSpread2(_objectSpread2({}, state), nextState);
    }
    case "first": {
      var stop = stops[0];
      return reducer2(state, {
        type: "move",
        id: stop && stop.id
      });
    }
    case "last": {
      var _stop = stops[stops.length - 1];
      return reducer2(state, {
        type: "move",
        id: _stop && _stop.id
      });
    }
    case "reset": {
      return _objectSpread2(_objectSpread2({}, state), {}, {
        currentId: null,
        unstable_pastId: null
      });
    }
    case "orientate":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        orientation: action.orientation
      });
    default:
      throw new Error();
  }
}
__name(reducer2, "reducer");
function useRoverState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), orientation = _useSealedState.orientation, _useSealedState$curre = _useSealedState.currentId, currentId = _useSealedState$curre === void 0 ? null : _useSealedState$curre, _useSealedState$loop = _useSealedState.loop, loop = _useSealedState$loop === void 0 ? false : _useSealedState$loop, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["orientation", "currentId", "loop"]);
  var _React$useReducer = (0, import_react33.useReducer)(reducer2, {
    orientation,
    stops: [],
    currentId,
    unstable_pastId: null,
    unstable_moves: 0,
    loop
  }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
  var idState = unstable_useIdState(sealed);
  return _objectSpread2(_objectSpread2(_objectSpread2({}, idState), state), {}, {
    register: useAction(function(id, ref) {
      return dispatch({
        type: "register",
        id,
        ref
      });
    }),
    unregister: useAction(function(id) {
      return dispatch({
        type: "unregister",
        id
      });
    }),
    move: useAction(function(id, silent) {
      return dispatch({
        type: "move",
        id,
        silent
      });
    }),
    next: useAction(function() {
      return dispatch({
        type: "next"
      });
    }),
    previous: useAction(function() {
      return dispatch({
        type: "previous"
      });
    }),
    first: useAction(function() {
      return dispatch({
        type: "first"
      });
    }),
    last: useAction(function() {
      return dispatch({
        type: "last"
      });
    }),
    unstable_reset: useAction(function() {
      return dispatch({
        type: "reset"
      });
    }),
    unstable_orientate: useAction(function(o) {
      return dispatch({
        type: "orientate",
        orientation: o
      });
    })
  });
}
__name(useRoverState, "useRoverState");
function useAction(fn) {
  return (0, import_react33.useCallback)(fn, []);
}
__name(useAction, "useAction");

// node_modules/reakit/es/__keys-3c0b2243.js
var TAB_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "selectedId", "panels", "manual", "setBaseId", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget", "select", "setSelectedId", "registerPanel", "unregisterPanel"];
var TAB_KEYS = TAB_STATE_KEYS;
var TAB_LIST_KEYS = TAB_KEYS;
var TAB_PANEL_KEYS = [].concat(TAB_LIST_KEYS, ["tabId"]);

// node_modules/reakit/es/Tab/Tab.js
var import_react34 = __toESM(require_react());
function useTabPanelId(options) {
  return (0, import_react34.useMemo)(function() {
    var _options$panels, _options$panels$find;
    return ((_options$panels = options.panels) === null || _options$panels === void 0 ? void 0 : (_options$panels$find = _options$panels.find(function(panel) {
      return panel.groupId === options.id;
    })) === null || _options$panels$find === void 0 ? void 0 : _options$panels$find.id) || void 0;
  }, [options.panels, options.id]);
}
__name(useTabPanelId, "useTabPanelId");
var useTab = createHook({
  name: "Tab",
  compose: useCompositeItem,
  keys: TAB_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions12(_ref) {
    var _ref$focusable = _ref.focusable, focusable = _ref$focusable === void 0 ? true : _ref$focusable, options = _objectWithoutPropertiesLoose(_ref, ["focusable"]);
    return _objectSpread2({
      focusable
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps24(options, _ref2) {
    var htmlOnClick = _ref2.onClick, htmlOnFocus = _ref2.onFocus, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onClick", "onFocus"]);
    var selected = options.selectedId === options.id;
    var tabPanelId = useTabPanelId(options);
    var onClickRef = useLiveRef(htmlOnClick);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onClick = (0, import_react34.useCallback)(function(event) {
      var _onClickRef$current, _options$select;
      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (!options.id) return;
      if (selected) return;
      (_options$select = options.select) === null || _options$select === void 0 ? void 0 : _options$select.call(options, options.id);
    }, [options.disabled, selected, options.select, options.id]);
    var onFocus = (0, import_react34.useCallback)(function(event) {
      var _onFocusRef$current, _options$select2;
      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (options.manual) return;
      if (!options.id) return;
      if (selected) return;
      (_options$select2 = options.select) === null || _options$select2 === void 0 ? void 0 : _options$select2.call(options, options.id);
    }, [options.id, options.disabled, options.manual, selected, options.select]);
    return _objectSpread2({
      role: "tab",
      "aria-selected": selected,
      "aria-controls": tabPanelId,
      onClick,
      onFocus
    }, htmlProps);
  }, "useProps")
});
var Tab = createComponent({
  as: "button",
  memo: true,
  useHook: useTab
});

// node_modules/reakit/es/Tab/TabList.js
var import_react35 = __toESM(require_react());
var useTabList = createHook({
  name: "TabList",
  compose: useComposite,
  keys: TAB_LIST_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps25(options, htmlProps) {
    return _objectSpread2({
      role: "tablist",
      "aria-orientation": options.orientation
    }, htmlProps);
  }, "useProps")
});
var TabList = createComponent({
  as: "div",
  useHook: useTabList,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$15(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/tab") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Tab/TabPanel.js
var import_react36 = __toESM(require_react());
function getTabsWithoutPanel(tabs, panels) {
  var panelsTabIds = panels.map(function(panel) {
    return panel.groupId;
  }).filter(Boolean);
  return tabs.filter(function(item) {
    return panelsTabIds.indexOf(item.id || void 0) === -1;
  });
}
__name(getTabsWithoutPanel, "getTabsWithoutPanel");
function getPanelIndex(panels, panel) {
  var panelsWithoutTabId = panels.filter(function(p) {
    return !p.groupId;
  });
  return panelsWithoutTabId.indexOf(panel);
}
__name(getPanelIndex, "getPanelIndex");
function getTabId(options) {
  var _options$panels, _tabsWithoutPanel$pan;
  var panel = (_options$panels = options.panels) === null || _options$panels === void 0 ? void 0 : _options$panels.find(function(p) {
    return p.id === options.id;
  });
  var tabId = options.tabId || (panel === null || panel === void 0 ? void 0 : panel.groupId);
  if (tabId || !panel || !options.panels || !options.items) {
    return tabId;
  }
  var panelIndex = getPanelIndex(options.panels, panel);
  var tabsWithoutPanel = getTabsWithoutPanel(options.items, options.panels);
  return ((_tabsWithoutPanel$pan = tabsWithoutPanel[panelIndex]) === null || _tabsWithoutPanel$pan === void 0 ? void 0 : _tabsWithoutPanel$pan.id) || void 0;
}
__name(getTabId, "getTabId");
var useTabPanel = createHook({
  name: "TabPanel",
  compose: [unstable_useId, useDisclosureContent],
  keys: TAB_PANEL_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps26(options, _ref) {
    var htmlRef = _ref.ref, htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref"]);
    var ref = (0, import_react36.useRef)(null);
    var tabId = getTabId(options);
    var id = options.id, registerPanel = options.registerPanel, unregisterPanel = options.unregisterPanel;
    (0, import_react36.useEffect)(function() {
      if (!id) return void 0;
      registerPanel === null || registerPanel === void 0 ? void 0 : registerPanel({
        id,
        ref,
        groupId: tabId
      });
      return function() {
        unregisterPanel === null || unregisterPanel === void 0 ? void 0 : unregisterPanel(id);
      };
    }, [tabId, id, registerPanel, unregisterPanel]);
    return _objectSpread2({
      ref: useForkRef(ref, htmlRef),
      role: "tabpanel",
      tabIndex: 0,
      "aria-labelledby": tabId
    }, htmlProps);
  }, "useProps"),
  useComposeOptions: /* @__PURE__ */ __name(function useComposeOptions(options) {
    var tabId = getTabId(options);
    return _objectSpread2({
      visible: tabId ? options.selectedId === tabId : false
    }, options);
  }, "useComposeOptions")
});
var TabPanel = createComponent({
  as: "div",
  useHook: useTabPanel
});

// node_modules/reakit/es/Tab/TabState.js
var import_react37 = __toESM(require_react());
function useTabState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), initialSelectedId = _useSealedState.selectedId, _useSealedState$loop = _useSealedState.loop, loop = _useSealedState$loop === void 0 ? true : _useSealedState$loop, _useSealedState$manua = _useSealedState.manual, manual = _useSealedState$manua === void 0 ? false : _useSealedState$manua, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["selectedId", "loop", "manual"]);
  var composite = useCompositeState(_objectSpread2({
    loop,
    currentId: initialSelectedId
  }, sealed));
  var panels = useCompositeState();
  var _React$useState = (0, import_react37.useState)(initialSelectedId), selectedId = _React$useState[0], setSelectedId = _React$useState[1];
  var select = (0, import_react37.useCallback)(function(id) {
    composite.move(id);
    setSelectedId(id);
  }, [composite.move]);
  (0, import_react37.useEffect)(function() {
    if (selectedId === null) return;
    var selectedItem = composite.items.find(function(item) {
      return item.id === selectedId;
    });
    if (selectedItem) return;
    if (composite.currentId) {
      setSelectedId(composite.currentId);
    }
  }, [selectedId, composite.items, composite.currentId]);
  return _objectSpread2(_objectSpread2({}, composite), {}, {
    selectedId,
    panels: panels.items,
    manual,
    select,
    setSelectedId,
    registerPanel: (0, import_react37.useCallback)(function(panel) {
      return panels.registerItem(panel);
    }, [panels.registerItem]),
    unregisterPanel: (0, import_react37.useCallback)(function(id) {
      return panels.unregisterItem(id);
    }, [panels.unregisterItem])
  });
}
__name(useTabState, "useTabState");

// node_modules/reakit/es/__keys-ae468c11.js
var TOOLBAR_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "setBaseId", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget"];
var TOOLBAR_KEYS = TOOLBAR_STATE_KEYS;
var TOOLBAR_ITEM_KEYS = TOOLBAR_KEYS;
var TOOLBAR_SEPARATOR_KEYS = TOOLBAR_ITEM_KEYS;

// node_modules/reakit/es/Toolbar/Toolbar.js
var import_react38 = __toESM(require_react());
var useToolbar = createHook({
  name: "Toolbar",
  compose: useComposite,
  keys: TOOLBAR_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps27(options, htmlProps) {
    return _objectSpread2({
      role: "toolbar",
      "aria-orientation": options.orientation
    }, htmlProps);
  }, "useProps")
});
var Toolbar = createComponent({
  as: "div",
  useHook: useToolbar,
  useCreateElement: /* @__PURE__ */ __name(function useCreateElement$16(type, props, children) {
    true ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/toolbar") : void 0;
    return useCreateElement(type, props, children);
  }, "useCreateElement$1")
});

// node_modules/reakit/es/Toolbar/ToolbarItem.js
var import_react39 = __toESM(require_react());
var useToolbarItem = createHook({
  name: "ToolbarItem",
  compose: useCompositeItem,
  keys: TOOLBAR_ITEM_KEYS
});
var ToolbarItem = createComponent({
  as: "button",
  memo: true,
  useHook: useToolbarItem
});

// node_modules/reakit/es/Toolbar/ToolbarSeparator.js
var useToolbarSeparator = createHook({
  name: "ToolbarSeparator",
  compose: useSeparator,
  keys: TOOLBAR_SEPARATOR_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions13(_ref) {
    var _ref$orientation = _ref.orientation, orientation = _ref$orientation === void 0 ? "vertical" : _ref$orientation, options = _objectWithoutPropertiesLoose(_ref, ["orientation"]);
    return _objectSpread2({
      orientation: orientation === "vertical" ? "horizontal" : "vertical"
    }, options);
  }, "useOptions")
});
var ToolbarSeparator = createComponent({
  as: "hr",
  memo: true,
  useHook: useToolbarSeparator
});

// node_modules/reakit/es/Toolbar/ToolbarState.js
var import_react40 = __toESM(require_react());
function useToolbarState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$orien = _useSealedState.orientation, orientation = _useSealedState$orien === void 0 ? "horizontal" : _useSealedState$orien, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["orientation"]);
  return useCompositeState(_objectSpread2({
    orientation
  }, sealed));
}
__name(useToolbarState, "useToolbarState");

// node_modules/reakit/es/__keys-d101cb3b.js
var TOOLTIP_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "unstable_disclosureRef", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "place", "unstable_timeout", "unstable_setTimeout"];
var TOOLTIP_KEYS = [].concat(TOOLTIP_STATE_KEYS, ["unstable_portal"]);
var TOOLTIP_ARROW_KEYS = TOOLTIP_STATE_KEYS;
var TOOLTIP_REFERENCE_KEYS = TOOLTIP_ARROW_KEYS;

// node_modules/reakit/es/__globalState-300469f0.js
var globalState = {
  currentTooltipId: null,
  listeners: /* @__PURE__ */ new Set(),
  subscribe: /* @__PURE__ */ __name(function subscribe(listener) {
    var _this = this;
    this.listeners.add(listener);
    return function() {
      _this.listeners.delete(listener);
    };
  }, "subscribe"),
  show: /* @__PURE__ */ __name(function show(id) {
    this.currentTooltipId = id;
    this.listeners.forEach(function(listener) {
      return listener(id);
    });
  }, "show"),
  hide: /* @__PURE__ */ __name(function hide(id) {
    if (this.currentTooltipId === id) {
      this.currentTooltipId = null;
      this.listeners.forEach(function(listener) {
        return listener(null);
      });
    }
  }, "hide")
};

// node_modules/reakit/es/Tooltip/Tooltip.js
var import_react41 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
function globallyHideTooltipOnEscape(event) {
  if (event.defaultPrevented) return;
  if (event.key === "Escape") {
    globalState.show(null);
  }
}
__name(globallyHideTooltipOnEscape, "globallyHideTooltipOnEscape");
var useTooltip = createHook({
  name: "Tooltip",
  compose: useDisclosureContent,
  keys: TOOLTIP_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions14(_ref) {
    var _ref$unstable_portal = _ref.unstable_portal, unstable_portal = _ref$unstable_portal === void 0 ? true : _ref$unstable_portal, options = _objectWithoutPropertiesLoose(_ref, ["unstable_portal"]);
    return _objectSpread2({
      unstable_portal
    }, options);
  }, "useOptions"),
  useProps: /* @__PURE__ */ __name(function useProps28(options, _ref2) {
    var htmlRef = _ref2.ref, htmlStyle = _ref2.style, htmlWrapElement = _ref2.wrapElement, htmlProps = _objectWithoutPropertiesLoose(_ref2, ["ref", "style", "wrapElement"]);
    (0, import_react41.useEffect)(function() {
      var _options$unstable_pop;
      var document = getDocument((_options$unstable_pop = options.unstable_popoverRef) === null || _options$unstable_pop === void 0 ? void 0 : _options$unstable_pop.current);
      document.addEventListener("keydown", globallyHideTooltipOnEscape);
    }, []);
    var wrapElement = (0, import_react41.useCallback)(function(element) {
      if (options.unstable_portal) {
        element = (0, import_react41.createElement)(Portal, null, element);
      }
      if (htmlWrapElement) {
        return htmlWrapElement(element);
      }
      return element;
    }, [options.unstable_portal, htmlWrapElement]);
    return _objectSpread2({
      ref: useForkRef(options.unstable_popoverRef, htmlRef),
      role: "tooltip",
      style: _objectSpread2(_objectSpread2({}, options.unstable_popoverStyles), {}, {
        pointerEvents: "none"
      }, htmlStyle),
      wrapElement
    }, htmlProps);
  }, "useProps")
});
var Tooltip = createComponent({
  as: "div",
  memo: true,
  useHook: useTooltip
});

// node_modules/reakit/es/Tooltip/TooltipArrow.js
var import_react42 = __toESM(require_react());
var useTooltipArrow = createHook({
  name: "TooltipArrow",
  compose: usePopoverArrow,
  keys: TOOLTIP_ARROW_KEYS,
  useOptions: /* @__PURE__ */ __name(function useOptions15(_ref) {
    var _ref$size = _ref.size, size = _ref$size === void 0 ? 16 : _ref$size, options = _objectWithoutPropertiesLoose(_ref, ["size"]);
    return _objectSpread2({
      size
    }, options);
  }, "useOptions")
});
var TooltipArrow = createComponent({
  as: "div",
  memo: true,
  useHook: useTooltipArrow
});

// node_modules/reakit/es/Tooltip/TooltipReference.js
var import_react43 = __toESM(require_react());
var useTooltipReference = createHook({
  name: "TooltipReference",
  compose: useRole,
  keys: TOOLTIP_REFERENCE_KEYS,
  useProps: /* @__PURE__ */ __name(function useProps29(options, _ref) {
    var htmlRef = _ref.ref, htmlOnFocus = _ref.onFocus, htmlOnBlur = _ref.onBlur, htmlOnMouseEnter = _ref.onMouseEnter, htmlOnMouseLeave = _ref.onMouseLeave, htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref", "onFocus", "onBlur", "onMouseEnter", "onMouseLeave"]);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);
    var onMouseLeaveRef = useLiveRef(htmlOnMouseLeave);
    var onFocus = (0, import_react43.useCallback)(function(event) {
      var _onFocusRef$current, _options$show;
      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);
    }, [options.show]);
    var onBlur = (0, import_react43.useCallback)(function(event) {
      var _onBlurRef$current, _options$hide;
      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
    }, [options.hide]);
    var onMouseEnter = (0, import_react43.useCallback)(function(event) {
      var _onMouseEnterRef$curr, _options$show2;
      (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);
      if (event.defaultPrevented) return;
      (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);
    }, [options.show]);
    var onMouseLeave = (0, import_react43.useCallback)(function(event) {
      var _onMouseLeaveRef$curr, _options$hide2;
      (_onMouseLeaveRef$curr = onMouseLeaveRef.current) === null || _onMouseLeaveRef$curr === void 0 ? void 0 : _onMouseLeaveRef$curr.call(onMouseLeaveRef, event);
      if (event.defaultPrevented) return;
      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);
    }, [options.hide]);
    return _objectSpread2({
      ref: useForkRef(options.unstable_referenceRef, htmlRef),
      tabIndex: 0,
      onFocus,
      onBlur,
      onMouseEnter,
      onMouseLeave,
      "aria-describedby": options.baseId
    }, htmlProps);
  }, "useProps")
});
var TooltipReference = createComponent({
  as: "div",
  useHook: useTooltipReference
});

// node_modules/reakit/es/Tooltip/TooltipState.js
var import_react44 = __toESM(require_react());
function useTooltipState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _useSealedState = useSealedState(initialState), _useSealedState$place = _useSealedState.placement, placement = _useSealedState$place === void 0 ? "top" : _useSealedState$place, _useSealedState$unsta = _useSealedState.unstable_timeout, initialTimeout = _useSealedState$unsta === void 0 ? 0 : _useSealedState$unsta, sealed = _objectWithoutPropertiesLoose(_useSealedState, ["placement", "unstable_timeout"]);
  var _React$useState = (0, import_react44.useState)(initialTimeout), timeout = _React$useState[0], setTimeout = _React$useState[1];
  var showTimeout = (0, import_react44.useRef)(null);
  var hideTimeout = (0, import_react44.useRef)(null);
  var _usePopoverState = usePopoverState(_objectSpread2(_objectSpread2({}, sealed), {}, {
    placement
  })), modal = _usePopoverState.modal, setModal = _usePopoverState.setModal, popover = _objectWithoutPropertiesLoose(_usePopoverState, ["modal", "setModal"]);
  var clearTimeouts = (0, import_react44.useCallback)(function() {
    if (showTimeout.current !== null) {
      window.clearTimeout(showTimeout.current);
    }
    if (hideTimeout.current !== null) {
      window.clearTimeout(hideTimeout.current);
    }
  }, []);
  var hide2 = (0, import_react44.useCallback)(function() {
    clearTimeouts();
    popover.hide();
    hideTimeout.current = window.setTimeout(function() {
      globalState.hide(popover.baseId);
    }, timeout);
  }, [clearTimeouts, popover.hide, timeout, popover.baseId]);
  var show2 = (0, import_react44.useCallback)(function() {
    clearTimeouts();
    if (!timeout || globalState.currentTooltipId) {
      globalState.show(popover.baseId);
      popover.show();
    } else {
      globalState.show(null);
      showTimeout.current = window.setTimeout(function() {
        globalState.show(popover.baseId);
        popover.show();
      }, timeout);
    }
  }, [clearTimeouts, timeout, popover.show, popover.baseId]);
  (0, import_react44.useEffect)(function() {
    return globalState.subscribe(function(id) {
      if (id !== popover.baseId) {
        clearTimeouts();
        if (popover.visible) {
          popover.hide();
        }
      }
    });
  }, [popover.baseId, clearTimeouts, popover.visible, popover.hide]);
  (0, import_react44.useEffect)(function() {
    return function() {
      clearTimeouts();
      globalState.hide(popover.baseId);
    };
  }, [clearTimeouts, popover.baseId]);
  return _objectSpread2(_objectSpread2({}, popover), {}, {
    hide: hide2,
    show: show2,
    unstable_timeout: timeout,
    unstable_setTimeout: setTimeout
  });
}
__name(useTooltipState, "useTooltipState");

// node_modules/reakit-system/es/SystemProvider.js
var import_react45 = __toESM(require_react());
function SystemProvider(_ref) {
  var children = _ref.children, system = _ref.unstable_system;
  return (0, import_react45.createElement)(SystemContext.Provider, {
    value: system
  }, children);
}
__name(SystemProvider, "SystemProvider");

// node_modules/reakit/es/Provider.js
var import_react46 = __toESM(require_react());
var defaultSystem = {};
function Provider(_ref) {
  var prefix = _ref.unstable_prefix, _ref$unstable_system = _ref.unstable_system, system = _ref$unstable_system === void 0 ? defaultSystem : _ref$unstable_system, children = _ref.children;
  return (0, import_react46.createElement)(unstable_IdProvider, {
    prefix
  }, (0, import_react46.createElement)(SystemProvider, {
    unstable_system: system
  }, children));
}
__name(Provider, "Provider");

export {
  useBox,
  Box,
  useCheckboxState,
  unstable_useCombobox,
  unstable_Combobox,
  unstable_useGridCell,
  unstable_GridCell,
  unstable_useComboboxItem,
  unstable_ComboboxItem,
  unstable_useComboboxGridCell,
  unstable_ComboboxGridCell,
  useGroup,
  Group,
  useCompositeGroup,
  CompositeGroup,
  unstable_useGridRow,
  unstable_GridRow,
  unstable_useComboboxGridRow,
  unstable_ComboboxGridRow,
  unstable_useGridState,
  unstable_useComboboxListGridState,
  unstable_useComboboxGridState,
  unstable_useComboboxList,
  unstable_ComboboxList,
  unstable_useComboboxListState,
  unstable_useComboboxOption,
  unstable_ComboboxOption,
  unstable_useComboboxPopover,
  unstable_ComboboxPopover,
  unstable_useComboboxState,
  unstable_useCompositeItemWidget,
  unstable_CompositeItemWidget,
  unstable_useForm,
  unstable_Form,
  unstable_useFormCheckbox,
  unstable_FormCheckbox,
  unstable_useFormGroup,
  unstable_FormGroup,
  useInput,
  Input,
  unstable_useFormInput,
  unstable_FormInput,
  unstable_useFormLabel,
  unstable_FormLabel,
  unstable_useFormMessage,
  unstable_FormMessage,
  unstable_useFormPushButton,
  unstable_FormPushButton,
  FormRadioGroupContext,
  unstable_useFormRadioGroup,
  unstable_FormRadioGroup,
  unstable_useFormRadio,
  unstable_FormRadio,
  unstable_useFormRemoveButton,
  unstable_FormRemoveButton,
  unstable_useFormState,
  unstable_useFormSubmitButton,
  unstable_FormSubmitButton,
  unstable_useGrid,
  unstable_Grid,
  useRadioGroup,
  RadioGroup,
  useRadioState,
  createOnKeyDown,
  useRover,
  Rover,
  useRoverState,
  useTab,
  Tab,
  useTabList,
  TabList,
  useTabPanel,
  TabPanel,
  useTabState,
  useToolbar,
  Toolbar,
  useToolbarItem,
  ToolbarItem,
  useToolbarSeparator,
  ToolbarSeparator,
  useToolbarState,
  useTooltip,
  Tooltip,
  useTooltipArrow,
  TooltipArrow,
  useTooltipReference,
  TooltipReference,
  useTooltipState,
  Provider
};
//# sourceMappingURL=chunk-RDHV2JWU.js.map
