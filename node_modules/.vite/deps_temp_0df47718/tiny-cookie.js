import {
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/tiny-cookie/dist/tiny-cookie.mjs
var __assign = /* @__PURE__ */ __name(function() {
  __assign = Object.assign || /* @__PURE__ */ __name(function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  }, "__assign");
  return __assign.apply(this, arguments);
}, "__assign");
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
__name(hasOwn, "hasOwn");
function escapeRe(str) {
  return str.replace(/[.*+?^$|[\](){}\\-]/g, "\\$&");
}
__name(escapeRe, "escapeRe");
function computeExpires(str) {
  var lastCh = str.charAt(str.length - 1);
  var value = parseInt(str, 10);
  var expires = /* @__PURE__ */ new Date();
  switch (lastCh) {
    case "Y":
      expires.setFullYear(expires.getFullYear() + value);
      break;
    case "M":
      expires.setMonth(expires.getMonth() + value);
      break;
    case "D":
      expires.setDate(expires.getDate() + value);
      break;
    case "h":
      expires.setHours(expires.getHours() + value);
      break;
    case "m":
      expires.setMinutes(expires.getMinutes() + value);
      break;
    case "s":
      expires.setSeconds(expires.getSeconds() + value);
      break;
    default:
      expires = new Date(str);
  }
  return expires;
}
__name(computeExpires, "computeExpires");
function convert(opts) {
  var res = "";
  for (var _i = 0, _a = Object.keys(opts); _i < _a.length; _i++) {
    var key = _a[_i];
    if (/^expires$/i.test(key)) {
      var expires = opts[key];
      var expiresDate = void 0;
      if (typeof expires === "object") {
        expiresDate = expires;
      } else {
        expires += typeof expires === "number" ? "D" : "";
        expiresDate = computeExpires(String(expires));
      }
      res += ";".concat(key, "=").concat(expiresDate.toUTCString());
    } else if (/^secure|partitioned$/.test(key)) {
      if (opts[key]) {
        res += ";".concat(key);
      }
    } else {
      res += ";".concat(key, "=").concat(opts[key]);
    }
  }
  if (!hasOwn(opts, "path")) {
    res += ";path=/";
  }
  return res;
}
__name(convert, "convert");
function isEnabled() {
  var key = "@key@";
  var value = "1";
  var re = new RegExp("(?:^|; )".concat(key, "=").concat(value, "(?:;|$)"));
  document.cookie = "".concat(key, "=").concat(value, ";path=/");
  var enabled = re.test(document.cookie);
  if (enabled) {
    remove(key);
  }
  return enabled;
}
__name(isEnabled, "isEnabled");
function get(key, decoder) {
  if (decoder === void 0) {
    decoder = decodeURIComponent;
  }
  if (typeof key !== "string" || !key) {
    return null;
  }
  var reKey = new RegExp("(?:^|; )".concat(escapeRe(key), "(?:=([^;]*))?(?:;|$)"));
  var match = reKey.exec(document.cookie);
  if (match === null) {
    return null;
  }
  if (typeof decoder === "function") {
    return decoder(match[1]);
  }
  return match[1];
}
__name(get, "get");
function getAll(decoder) {
  if (decoder === void 0) {
    decoder = decodeURIComponent;
  }
  var reKey = /(?:^|; )([^=]+?)(?:=([^;]*))?(?:;|$)/g;
  var cookies = {};
  var match;
  while (match = reKey.exec(document.cookie)) {
    reKey.lastIndex = match.index + match.length - 1;
    cookies[match[1]] = typeof decoder === "function" ? decoder(match[2]) : match[2];
  }
  return cookies;
}
__name(getAll, "getAll");
function set(key, value, encoder, options) {
  if (encoder === void 0) {
    encoder = encodeURIComponent;
  }
  if (typeof encoder === "object" && encoder !== null) {
    options = encoder;
    encoder = encodeURIComponent;
  }
  var attrsStr = convert(options || {});
  var valueStr = typeof encoder === "function" ? encoder(value) : value;
  var newCookie = "".concat(key, "=").concat(valueStr).concat(attrsStr);
  document.cookie = newCookie;
}
__name(set, "set");
function remove(key, options) {
  var opts = { expires: -1 };
  if (options) {
    opts = __assign(__assign({}, options), opts);
  }
  return set(key, "a", opts);
}
__name(remove, "remove");
function getRaw(key) {
  return get(key, null);
}
__name(getRaw, "getRaw");
function setRaw(key, value, options) {
  return set(key, value, null, options);
}
__name(setRaw, "setRaw");
export {
  get,
  getAll,
  getAll as getAllCookies,
  get as getCookie,
  getRaw,
  getRaw as getRawCookie,
  isEnabled as isCookieEnabled,
  isEnabled,
  remove,
  remove as removeCookie,
  set,
  set as setCookie,
  setRaw,
  setRaw as setRawCookie
};
//# sourceMappingURL=tiny-cookie.js.map
