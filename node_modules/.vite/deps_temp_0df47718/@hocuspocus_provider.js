import {
  Doc,
  applyUpdate,
  encodeStateAsUpdate,
  encodeStateVector
} from "./chunk-2OJWYYAH.js";
import {
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/@lifeomic/attempt/dist/es6/src/index.js
function applyDefaults(options) {
  if (!options) {
    options = {};
  }
  return {
    delay: options.delay === void 0 ? 200 : options.delay,
    initialDelay: options.initialDelay === void 0 ? 0 : options.initialDelay,
    minDelay: options.minDelay === void 0 ? 0 : options.minDelay,
    maxDelay: options.maxDelay === void 0 ? 0 : options.maxDelay,
    factor: options.factor === void 0 ? 0 : options.factor,
    maxAttempts: options.maxAttempts === void 0 ? 3 : options.maxAttempts,
    timeout: options.timeout === void 0 ? 0 : options.timeout,
    jitter: options.jitter === true,
    handleError: options.handleError === void 0 ? null : options.handleError,
    handleTimeout: options.handleTimeout === void 0 ? null : options.handleTimeout,
    beforeAttempt: options.beforeAttempt === void 0 ? null : options.beforeAttempt,
    calculateDelay: options.calculateDelay === void 0 ? null : options.calculateDelay
  };
}
__name(applyDefaults, "applyDefaults");
async function sleep(delay) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, delay);
  });
}
__name(sleep, "sleep");
function defaultCalculateDelay(context, options) {
  let delay = options.delay;
  if (delay === 0) {
    return 0;
  }
  if (options.factor) {
    delay *= Math.pow(options.factor, context.attemptNum - 1);
    if (options.maxDelay !== 0) {
      delay = Math.min(delay, options.maxDelay);
    }
  }
  if (options.jitter) {
    const min2 = Math.ceil(options.minDelay);
    const max2 = Math.floor(delay);
    delay = Math.floor(Math.random() * (max2 - min2 + 1)) + min2;
  }
  return Math.round(delay);
}
__name(defaultCalculateDelay, "defaultCalculateDelay");
async function retry(attemptFunc, attemptOptions) {
  const options = applyDefaults(attemptOptions);
  for (const prop of [
    "delay",
    "initialDelay",
    "minDelay",
    "maxDelay",
    "maxAttempts",
    "timeout"
  ]) {
    const value = options[prop];
    if (!Number.isInteger(value) || value < 0) {
      throw new Error(`Value for ${prop} must be an integer greater than or equal to 0`);
    }
  }
  if (options.factor.constructor !== Number || options.factor < 0) {
    throw new Error(`Value for factor must be a number greater than or equal to 0`);
  }
  if (options.delay < options.minDelay) {
    throw new Error(`delay cannot be less than minDelay (delay: ${options.delay}, minDelay: ${options.minDelay}`);
  }
  const context = {
    attemptNum: 0,
    attemptsRemaining: options.maxAttempts ? options.maxAttempts : -1,
    aborted: false,
    abort() {
      context.aborted = true;
    }
  };
  const calculateDelay = options.calculateDelay || defaultCalculateDelay;
  async function makeAttempt() {
    if (options.beforeAttempt) {
      options.beforeAttempt(context, options);
    }
    if (context.aborted) {
      const err = new Error(`Attempt aborted`);
      err.code = "ATTEMPT_ABORTED";
      throw err;
    }
    const onError = /* @__PURE__ */ __name(async (err) => {
      if (options.handleError) {
        await options.handleError(err, context, options);
      }
      if (context.aborted || context.attemptsRemaining === 0) {
        throw err;
      }
      context.attemptNum++;
      const delay = calculateDelay(context, options);
      if (delay) {
        await sleep(delay);
      }
      return makeAttempt();
    }, "onError");
    if (context.attemptsRemaining > 0) {
      context.attemptsRemaining--;
    }
    if (options.timeout) {
      return new Promise((resolve, reject) => {
        const timer = setTimeout(() => {
          if (options.handleTimeout) {
            try {
              resolve(options.handleTimeout(context, options));
            } catch (e) {
              reject(e);
            }
          } else {
            const err = new Error(`Retry timeout (attemptNum: ${context.attemptNum}, timeout: ${options.timeout})`);
            err.code = "ATTEMPT_TIMEOUT";
            reject(err);
          }
        }, options.timeout);
        attemptFunc(context, options).then((result) => {
          clearTimeout(timer);
          resolve(result);
        }).catch((err) => {
          clearTimeout(timer);
          onError(err).then(resolve).catch(reject);
        });
      });
    } else {
      return attemptFunc(context, options).catch(onError);
    }
  }
  __name(makeAttempt, "makeAttempt");
  const initialDelay = options.calculateDelay ? options.calculateDelay(context, options) : options.initialDelay;
  if (initialDelay) {
    await sleep(initialDelay);
  }
  return makeAttempt();
}
__name(retry, "retry");

// node_modules/@hocuspocus/common/dist/hocuspocus-common.esm.js
var toLowerCase = /* @__PURE__ */ __name((s) => s.toLowerCase(), "toLowerCase");
var trimLeftRegex = /^\s*/g;
var trimLeft = /* @__PURE__ */ __name((s) => s.replace(trimLeftRegex, ""), "trimLeft");
var fromCamelCaseRegex = /([A-Z])/g;
var fromCamelCase = /* @__PURE__ */ __name((s, separator) => trimLeft(s.replace(fromCamelCaseRegex, (match) => `${separator}${toLowerCase(match)}`)), "fromCamelCase");
typeof TextEncoder !== "undefined" ? new TextEncoder() : null;
var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8", { fatal: true, ignoreBOM: true });
if (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {
  utf8TextDecoder = null;
}
var create = /* @__PURE__ */ __name(() => /* @__PURE__ */ new Map(), "create");
var undefinedToNull = /* @__PURE__ */ __name((v) => v === void 0 ? null : v, "undefinedToNull");
var _VarStoragePolyfill = class _VarStoragePolyfill {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  /**
   * @param {string} key
   * @param {any} newValue
   */
  setItem(key, newValue) {
    this.map.set(key, newValue);
  }
  /**
   * @param {string} key
   */
  getItem(key) {
    return this.map.get(key);
  }
};
__name(_VarStoragePolyfill, "VarStoragePolyfill");
var VarStoragePolyfill = _VarStoragePolyfill;
var _localStorage = new VarStoragePolyfill();
var usePolyfill = true;
try {
  if (typeof localStorage !== "undefined") {
    _localStorage = localStorage;
    usePolyfill = false;
  }
} catch (e) {
}
var varStorage = _localStorage;
var isNode = typeof process !== "undefined" && process.release && /node|io\.js/.test(process.release.name);
typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
var params;
var computeParams = /* @__PURE__ */ __name(() => {
  if (params === void 0) {
    if (isNode) {
      params = create();
      const pargs = process.argv;
      let currParamName = null;
      for (let i = 0; i < pargs.length; i++) {
        const parg = pargs[i];
        if (parg[0] === "-") {
          if (currParamName !== null) {
            params.set(currParamName, "");
          }
          currParamName = parg;
        } else {
          if (currParamName !== null) {
            params.set(currParamName, parg);
            currParamName = null;
          }
        }
      }
      if (currParamName !== null) {
        params.set(currParamName, "");
      }
    } else if (typeof location === "object") {
      params = create();
      (location.search || "?").slice(1).split("&").forEach((kv) => {
        if (kv.length !== 0) {
          const [key, value] = kv.split("=");
          params.set(`--${fromCamelCase(key, "-")}`, value);
          params.set(`-${fromCamelCase(key, "-")}`, value);
        }
      });
    } else {
      params = create();
    }
  }
  return params;
}, "computeParams");
var hasParam = /* @__PURE__ */ __name((name) => computeParams().has(name), "hasParam");
var getVariable = /* @__PURE__ */ __name((name) => isNode ? undefinedToNull(process.env[name.toUpperCase()]) : undefinedToNull(varStorage.getItem(name)), "getVariable");
var hasConf = /* @__PURE__ */ __name((name) => hasParam("--" + name) || getVariable(name) !== null, "hasConf");
hasConf("production");
var BIT8 = 128;
var BITS7 = 127;
var readUint8 = /* @__PURE__ */ __name((decoder) => decoder.arr[decoder.pos++], "readUint8");
var readVarUint = /* @__PURE__ */ __name((decoder) => {
  let num = 0;
  let len = 0;
  while (true) {
    const r = decoder.arr[decoder.pos++];
    num = num | (r & BITS7) << len;
    len += 7;
    if (r < BIT8) {
      return num >>> 0;
    }
    if (len > 35) {
      throw new Error("Integer out of range!");
    }
  }
}, "readVarUint");
var readVarString = /* @__PURE__ */ __name((decoder) => {
  let remainingLen = readVarUint(decoder);
  if (remainingLen === 0) {
    return "";
  } else {
    let encodedString = String.fromCodePoint(readUint8(decoder));
    if (--remainingLen < 100) {
      while (remainingLen--) {
        encodedString += String.fromCodePoint(readUint8(decoder));
      }
    } else {
      while (remainingLen > 0) {
        const nextLen = remainingLen < 1e4 ? remainingLen : 1e4;
        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);
        decoder.pos += nextLen;
        encodedString += String.fromCodePoint.apply(
          null,
          /** @type {any} */
          bytes
        );
        remainingLen -= nextLen;
      }
    }
    return decodeURIComponent(escape(encodedString));
  }
}, "readVarString");
var write = /* @__PURE__ */ __name((encoder, num) => {
  const bufferLen = encoder.cbuf.length;
  if (encoder.cpos === bufferLen) {
    encoder.bufs.push(encoder.cbuf);
    encoder.cbuf = new Uint8Array(bufferLen * 2);
    encoder.cpos = 0;
  }
  encoder.cbuf[encoder.cpos++] = num;
}, "write");
var writeVarUint = /* @__PURE__ */ __name((encoder, num) => {
  while (num > BITS7) {
    write(encoder, BIT8 | BITS7 & num);
    num >>>= 7;
  }
  write(encoder, BITS7 & num);
}, "writeVarUint");
var writeVarString = /* @__PURE__ */ __name((encoder, str) => {
  const encodedString = unescape(encodeURIComponent(str));
  const len = encodedString.length;
  writeVarUint(encoder, len);
  for (let i = 0; i < len; i++) {
    write(
      encoder,
      /** @type {number} */
      encodedString.codePointAt(i)
    );
  }
}, "writeVarString");
var AuthMessageType;
(function(AuthMessageType2) {
  AuthMessageType2[AuthMessageType2["Token"] = 0] = "Token";
  AuthMessageType2[AuthMessageType2["PermissionDenied"] = 1] = "PermissionDenied";
  AuthMessageType2[AuthMessageType2["Authenticated"] = 2] = "Authenticated";
})(AuthMessageType || (AuthMessageType = {}));
var writeAuthentication = /* @__PURE__ */ __name((encoder, auth) => {
  writeVarUint(encoder, AuthMessageType.Token);
  writeVarString(encoder, auth);
}, "writeAuthentication");
var readAuthMessage = /* @__PURE__ */ __name((decoder, permissionDeniedHandler, authenticatedHandler) => {
  switch (readVarUint(decoder)) {
    case AuthMessageType.PermissionDenied: {
      permissionDeniedHandler(readVarString(decoder));
      break;
    }
    case AuthMessageType.Authenticated: {
      authenticatedHandler();
      break;
    }
  }
}, "readAuthMessage");
var Unauthorized = {
  code: 4401,
  reason: "Unauthorized"
};
var Forbidden = {
  code: 4403,
  reason: "Forbidden"
};
var awarenessStatesToArray = /* @__PURE__ */ __name((states) => {
  return Array.from(states.entries()).map(([key, value]) => {
    return {
      clientId: key,
      ...value
    };
  });
}, "awarenessStatesToArray");
var WsReadyStates;
(function(WsReadyStates2) {
  WsReadyStates2[WsReadyStates2["Connecting"] = 0] = "Connecting";
  WsReadyStates2[WsReadyStates2["Open"] = 1] = "Open";
  WsReadyStates2[WsReadyStates2["Closing"] = 2] = "Closing";
  WsReadyStates2[WsReadyStates2["Closed"] = 3] = "Closed";
})(WsReadyStates || (WsReadyStates = {}));

// node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js
var create$1 = /* @__PURE__ */ __name(() => /* @__PURE__ */ new Map(), "create$1");
var setIfUndefined = /* @__PURE__ */ __name((map2, key, createT) => {
  let set = map2.get(key);
  if (set === void 0) {
    map2.set(key, set = createT());
  }
  return set;
}, "setIfUndefined");
var fromCharCode = String.fromCharCode;
var toLowerCase2 = /* @__PURE__ */ __name((s) => s.toLowerCase(), "toLowerCase");
var trimLeftRegex2 = /^\s*/g;
var trimLeft2 = /* @__PURE__ */ __name((s) => s.replace(trimLeftRegex2, ""), "trimLeft");
var fromCamelCaseRegex2 = /([A-Z])/g;
var fromCamelCase2 = /* @__PURE__ */ __name((s, separator) => trimLeft2(s.replace(fromCamelCaseRegex2, (match) => `${separator}${toLowerCase2(match)}`)), "fromCamelCase");
typeof TextEncoder !== "undefined" ? new TextEncoder() : null;
var utf8TextDecoder2 = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8", { fatal: true, ignoreBOM: true });
if (utf8TextDecoder2 && utf8TextDecoder2.decode(new Uint8Array()).length === 1) {
  utf8TextDecoder2 = null;
}
var undefinedToNull2 = /* @__PURE__ */ __name((v) => v === void 0 ? null : v, "undefinedToNull");
var _VarStoragePolyfill2 = class _VarStoragePolyfill2 {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  /**
   * @param {string} key
   * @param {any} newValue
   */
  setItem(key, newValue) {
    this.map.set(key, newValue);
  }
  /**
   * @param {string} key
   */
  getItem(key) {
    return this.map.get(key);
  }
};
__name(_VarStoragePolyfill2, "VarStoragePolyfill");
var VarStoragePolyfill2 = _VarStoragePolyfill2;
var _localStorage2 = new VarStoragePolyfill2();
var usePolyfill2 = true;
try {
  if (typeof localStorage !== "undefined") {
    _localStorage2 = localStorage;
    usePolyfill2 = false;
  }
} catch (e) {
}
var varStorage2 = _localStorage2;
var onChange = /* @__PURE__ */ __name((eventHandler) => usePolyfill2 || addEventListener(
  "storage",
  /** @type {any} */
  eventHandler
), "onChange");
var isNode2 = typeof process !== "undefined" && process.release && /node|io\.js/.test(process.release.name);
var isBrowser = typeof window !== "undefined" && !isNode2;
typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
var params2;
var computeParams2 = /* @__PURE__ */ __name(() => {
  if (params2 === void 0) {
    if (isNode2) {
      params2 = create$1();
      const pargs = process.argv;
      let currParamName = null;
      for (let i = 0; i < pargs.length; i++) {
        const parg = pargs[i];
        if (parg[0] === "-") {
          if (currParamName !== null) {
            params2.set(currParamName, "");
          }
          currParamName = parg;
        } else {
          if (currParamName !== null) {
            params2.set(currParamName, parg);
            currParamName = null;
          }
        }
      }
      if (currParamName !== null) {
        params2.set(currParamName, "");
      }
    } else if (typeof location === "object") {
      params2 = create$1();
      (location.search || "?").slice(1).split("&").forEach((kv) => {
        if (kv.length !== 0) {
          const [key, value] = kv.split("=");
          params2.set(`--${fromCamelCase2(key, "-")}`, value);
          params2.set(`-${fromCamelCase2(key, "-")}`, value);
        }
      });
    } else {
      params2 = create$1();
    }
  }
  return params2;
}, "computeParams");
var hasParam2 = /* @__PURE__ */ __name((name) => computeParams2().has(name), "hasParam");
var getVariable2 = /* @__PURE__ */ __name((name) => isNode2 ? undefinedToNull2(process.env[name.toUpperCase()]) : undefinedToNull2(varStorage2.getItem(name)), "getVariable");
var hasConf2 = /* @__PURE__ */ __name((name) => hasParam2("--" + name) || getVariable2(name) !== null, "hasConf");
hasConf2("production");
var floor = Math.floor;
var min = /* @__PURE__ */ __name((a, b) => a < b ? a : b, "min");
var max = /* @__PURE__ */ __name((a, b) => a > b ? a : b, "max");
var BIT82 = 128;
var BITS72 = 127;
var _Encoder = class _Encoder {
  constructor() {
    this.cpos = 0;
    this.cbuf = new Uint8Array(100);
    this.bufs = [];
  }
};
__name(_Encoder, "Encoder");
var Encoder = _Encoder;
var createEncoder = /* @__PURE__ */ __name(() => new Encoder(), "createEncoder");
var length$1 = /* @__PURE__ */ __name((encoder) => {
  let len = encoder.cpos;
  for (let i = 0; i < encoder.bufs.length; i++) {
    len += encoder.bufs[i].length;
  }
  return len;
}, "length$1");
var toUint8Array = /* @__PURE__ */ __name((encoder) => {
  const uint8arr = new Uint8Array(length$1(encoder));
  let curPos = 0;
  for (let i = 0; i < encoder.bufs.length; i++) {
    const d = encoder.bufs[i];
    uint8arr.set(d, curPos);
    curPos += d.length;
  }
  uint8arr.set(createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos);
  return uint8arr;
}, "toUint8Array");
var write2 = /* @__PURE__ */ __name((encoder, num) => {
  const bufferLen = encoder.cbuf.length;
  if (encoder.cpos === bufferLen) {
    encoder.bufs.push(encoder.cbuf);
    encoder.cbuf = new Uint8Array(bufferLen * 2);
    encoder.cpos = 0;
  }
  encoder.cbuf[encoder.cpos++] = num;
}, "write");
var writeVarUint2 = /* @__PURE__ */ __name((encoder, num) => {
  while (num > BITS72) {
    write2(encoder, BIT82 | BITS72 & num);
    num >>>= 7;
  }
  write2(encoder, BITS72 & num);
}, "writeVarUint");
var writeVarString2 = /* @__PURE__ */ __name((encoder, str) => {
  const encodedString = unescape(encodeURIComponent(str));
  const len = encodedString.length;
  writeVarUint2(encoder, len);
  for (let i = 0; i < len; i++) {
    write2(
      encoder,
      /** @type {number} */
      encodedString.codePointAt(i)
    );
  }
}, "writeVarString");
var writeUint8Array = /* @__PURE__ */ __name((encoder, uint8Array) => {
  const bufferLen = encoder.cbuf.length;
  const cpos = encoder.cpos;
  const leftCopyLen = min(bufferLen - cpos, uint8Array.length);
  const rightCopyLen = uint8Array.length - leftCopyLen;
  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);
  encoder.cpos += leftCopyLen;
  if (rightCopyLen > 0) {
    encoder.bufs.push(encoder.cbuf);
    encoder.cbuf = new Uint8Array(max(bufferLen * 2, rightCopyLen));
    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));
    encoder.cpos = rightCopyLen;
  }
}, "writeUint8Array");
var writeVarUint8Array = /* @__PURE__ */ __name((encoder, uint8Array) => {
  writeVarUint2(encoder, uint8Array.byteLength);
  writeUint8Array(encoder, uint8Array);
}, "writeVarUint8Array");
var _Decoder = class _Decoder {
  /**
   * @param {Uint8Array} uint8Array Binary data to decode
   */
  constructor(uint8Array) {
    this.arr = uint8Array;
    this.pos = 0;
  }
};
__name(_Decoder, "Decoder");
var Decoder = _Decoder;
var createDecoder = /* @__PURE__ */ __name((uint8Array) => new Decoder(uint8Array), "createDecoder");
var readUint8Array = /* @__PURE__ */ __name((decoder, len) => {
  const view = createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);
  decoder.pos += len;
  return view;
}, "readUint8Array");
var readVarUint8Array = /* @__PURE__ */ __name((decoder) => readUint8Array(decoder, readVarUint2(decoder)), "readVarUint8Array");
var readUint82 = /* @__PURE__ */ __name((decoder) => decoder.arr[decoder.pos++], "readUint8");
var readVarUint2 = /* @__PURE__ */ __name((decoder) => {
  let num = 0;
  let len = 0;
  while (true) {
    const r = decoder.arr[decoder.pos++];
    num = num | (r & BITS72) << len;
    len += 7;
    if (r < BIT82) {
      return num >>> 0;
    }
    if (len > 35) {
      throw new Error("Integer out of range!");
    }
  }
}, "readVarUint");
var readVarString2 = /* @__PURE__ */ __name((decoder) => {
  let remainingLen = readVarUint2(decoder);
  if (remainingLen === 0) {
    return "";
  } else {
    let encodedString = String.fromCodePoint(readUint82(decoder));
    if (--remainingLen < 100) {
      while (remainingLen--) {
        encodedString += String.fromCodePoint(readUint82(decoder));
      }
    } else {
      while (remainingLen > 0) {
        const nextLen = remainingLen < 1e4 ? remainingLen : 1e4;
        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);
        decoder.pos += nextLen;
        encodedString += String.fromCodePoint.apply(
          null,
          /** @type {any} */
          bytes
        );
        remainingLen -= nextLen;
      }
    }
    return decodeURIComponent(escape(encodedString));
  }
}, "readVarString");
var createUint8ArrayFromLen = /* @__PURE__ */ __name((len) => new Uint8Array(len), "createUint8ArrayFromLen");
var createUint8ArrayViewFromArrayBuffer = /* @__PURE__ */ __name((buffer, byteOffset, length2) => new Uint8Array(buffer, byteOffset, length2), "createUint8ArrayViewFromArrayBuffer");
var createUint8ArrayFromArrayBuffer = /* @__PURE__ */ __name((buffer) => new Uint8Array(buffer), "createUint8ArrayFromArrayBuffer");
var toBase64Browser = /* @__PURE__ */ __name((bytes) => {
  let s = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    s += fromCharCode(bytes[i]);
  }
  return btoa(s);
}, "toBase64Browser");
var toBase64Node = /* @__PURE__ */ __name((bytes) => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString("base64"), "toBase64Node");
var fromBase64Browser = /* @__PURE__ */ __name((s) => {
  const a = atob(s);
  const bytes = createUint8ArrayFromLen(a.length);
  for (let i = 0; i < a.length; i++) {
    bytes[i] = a.charCodeAt(i);
  }
  return bytes;
}, "fromBase64Browser");
var fromBase64Node = /* @__PURE__ */ __name((s) => {
  const buf = Buffer.from(s, "base64");
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
}, "fromBase64Node");
var toBase64 = isBrowser ? toBase64Browser : toBase64Node;
var fromBase64 = isBrowser ? fromBase64Browser : fromBase64Node;
var channels = /* @__PURE__ */ new Map();
var _LocalStoragePolyfill = class _LocalStoragePolyfill {
  /**
   * @param {string} room
   */
  constructor(room) {
    this.room = room;
    this.onmessage = null;
    onChange((e) => e.key === room && this.onmessage !== null && this.onmessage({ data: fromBase64(e.newValue || "") }));
  }
  /**
   * @param {ArrayBuffer} buf
   */
  postMessage(buf) {
    varStorage2.setItem(this.room, toBase64(createUint8ArrayFromArrayBuffer(buf)));
  }
};
__name(_LocalStoragePolyfill, "LocalStoragePolyfill");
var LocalStoragePolyfill = _LocalStoragePolyfill;
var BC = typeof BroadcastChannel === "undefined" ? LocalStoragePolyfill : BroadcastChannel;
var getChannel = /* @__PURE__ */ __name((room) => setIfUndefined(channels, room, () => {
  const subs = /* @__PURE__ */ new Set();
  const bc = new BC(room);
  bc.onmessage = (e) => subs.forEach((sub) => sub(e.data));
  return {
    bc,
    subs
  };
}), "getChannel");
var subscribe = /* @__PURE__ */ __name((room, f) => getChannel(room).subs.add(f), "subscribe");
var unsubscribe = /* @__PURE__ */ __name((room, f) => getChannel(room).subs.delete(f), "unsubscribe");
var publish = /* @__PURE__ */ __name((room, data) => {
  const c = getChannel(room);
  c.bc.postMessage(data);
  c.subs.forEach((sub) => sub(data));
}, "publish");
var getUnixTime = Date.now;
var create2 = /* @__PURE__ */ __name(() => /* @__PURE__ */ new Set(), "create");
var from = Array.from;
var _Observable = class _Observable {
  constructor() {
    this._observers = create$1();
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  on(name, f) {
    setIfUndefined(this._observers, name, create2).add(f);
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  once(name, f) {
    const _f = /* @__PURE__ */ __name((...args) => {
      this.off(name, _f);
      f(...args);
    }, "_f");
    this.on(name, _f);
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  off(name, f) {
    const observers = this._observers.get(name);
    if (observers !== void 0) {
      observers.delete(f);
      if (observers.size === 0) {
        this._observers.delete(name);
      }
    }
  }
  /**
   * Emit a named event. All registered event listeners that listen to the
   * specified name will receive the event.
   *
   * @todo This should catch exceptions
   *
   * @param {N} name The event name.
   * @param {Array<any>} args The arguments that are applied to the event listener.
   */
  emit(name, args) {
    return from((this._observers.get(name) || create$1()).values()).forEach((f) => f(...args));
  }
  destroy() {
    this._observers = create$1();
  }
};
__name(_Observable, "Observable");
var Observable = _Observable;
var keys = Object.keys;
var map = /* @__PURE__ */ __name((obj, f) => {
  const results = [];
  for (const key in obj) {
    results.push(f(obj[key], key));
  }
  return results;
}, "map");
var length = /* @__PURE__ */ __name((obj) => keys(obj).length, "length");
var hasProperty = /* @__PURE__ */ __name((obj, key) => Object.prototype.hasOwnProperty.call(obj, key), "hasProperty");
var equalityStrict = /* @__PURE__ */ __name((a, b) => a === b, "equalityStrict");
var equalityDeep = /* @__PURE__ */ __name((a, b) => {
  if (a == null || b == null) {
    return equalityStrict(a, b);
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a === b) {
    return true;
  }
  switch (a.constructor) {
    case ArrayBuffer:
      a = new Uint8Array(a);
      b = new Uint8Array(b);
    case Uint8Array: {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      break;
    }
    case Set: {
      if (a.size !== b.size) {
        return false;
      }
      for (const value of a) {
        if (!b.has(value)) {
          return false;
        }
      }
      break;
    }
    case Map: {
      if (a.size !== b.size) {
        return false;
      }
      for (const key of a.keys()) {
        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {
          return false;
        }
      }
      break;
    }
    case Object:
      if (length(a) !== length(b)) {
        return false;
      }
      for (const key in a) {
        if (!hasProperty(a, key) || !equalityDeep(a[key], b[key])) {
          return false;
        }
      }
      break;
    case Array:
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (!equalityDeep(a[i], b[i])) {
          return false;
        }
      }
      break;
    default:
      return false;
  }
  return true;
}, "equalityDeep");
var outdatedTimeout = 3e4;
var _Awareness = class _Awareness extends Observable {
  /**
   * @param {Y.Doc} doc
   */
  constructor(doc) {
    super();
    this.doc = doc;
    this.clientID = doc.clientID;
    this.states = /* @__PURE__ */ new Map();
    this.meta = /* @__PURE__ */ new Map();
    this._checkInterval = /** @type {any} */
    setInterval(() => {
      const now = getUnixTime();
      if (this.getLocalState() !== null && outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */
      this.meta.get(this.clientID).lastUpdated) {
        this.setLocalState(this.getLocalState());
      }
      const remove = [];
      this.meta.forEach((meta, clientid) => {
        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {
          remove.push(clientid);
        }
      });
      if (remove.length > 0) {
        removeAwarenessStates(this, remove, "timeout");
      }
    }, floor(outdatedTimeout / 10));
    doc.on("destroy", () => {
      this.destroy();
    });
    this.setLocalState({});
  }
  destroy() {
    this.emit("destroy", [this]);
    this.setLocalState(null);
    super.destroy();
    clearInterval(this._checkInterval);
  }
  /**
   * @return {Object<string,any>|null}
   */
  getLocalState() {
    return this.states.get(this.clientID) || null;
  }
  /**
   * @param {Object<string,any>|null} state
   */
  setLocalState(state) {
    const clientID = this.clientID;
    const currLocalMeta = this.meta.get(clientID);
    const clock = currLocalMeta === void 0 ? 0 : currLocalMeta.clock + 1;
    const prevState = this.states.get(clientID);
    if (state === null) {
      this.states.delete(clientID);
    } else {
      this.states.set(clientID, state);
    }
    this.meta.set(clientID, {
      clock,
      lastUpdated: getUnixTime()
    });
    const added = [];
    const updated = [];
    const filteredUpdated = [];
    const removed = [];
    if (state === null) {
      removed.push(clientID);
    } else if (prevState == null) {
      if (state != null) {
        added.push(clientID);
      }
    } else {
      updated.push(clientID);
      if (!equalityDeep(prevState, state)) {
        filteredUpdated.push(clientID);
      }
    }
    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {
      this.emit("change", [{ added, updated: filteredUpdated, removed }, "local"]);
    }
    this.emit("update", [{ added, updated, removed }, "local"]);
  }
  /**
   * @param {string} field
   * @param {any} value
   */
  setLocalStateField(field, value) {
    const state = this.getLocalState();
    if (state !== null) {
      this.setLocalState({
        ...state,
        [field]: value
      });
    }
  }
  /**
   * @return {Map<number,Object<string,any>>}
   */
  getStates() {
    return this.states;
  }
};
__name(_Awareness, "Awareness");
var Awareness = _Awareness;
var removeAwarenessStates = /* @__PURE__ */ __name((awareness, clients, origin) => {
  const removed = [];
  for (let i = 0; i < clients.length; i++) {
    const clientID = clients[i];
    if (awareness.states.has(clientID)) {
      awareness.states.delete(clientID);
      if (clientID === awareness.clientID) {
        const curMeta = (
          /** @type {MetaClientState} */
          awareness.meta.get(clientID)
        );
        awareness.meta.set(clientID, {
          clock: curMeta.clock + 1,
          lastUpdated: getUnixTime()
        });
      }
      removed.push(clientID);
    }
  }
  if (removed.length > 0) {
    awareness.emit("change", [{ added: [], updated: [], removed }, origin]);
    awareness.emit("update", [{ added: [], updated: [], removed }, origin]);
  }
}, "removeAwarenessStates");
var encodeAwarenessUpdate = /* @__PURE__ */ __name((awareness, clients, states = awareness.states) => {
  const len = clients.length;
  const encoder = createEncoder();
  writeVarUint2(encoder, len);
  for (let i = 0; i < len; i++) {
    const clientID = clients[i];
    const state = states.get(clientID) || null;
    const clock = (
      /** @type {MetaClientState} */
      awareness.meta.get(clientID).clock
    );
    writeVarUint2(encoder, clientID);
    writeVarUint2(encoder, clock);
    writeVarString2(encoder, JSON.stringify(state));
  }
  return toUint8Array(encoder);
}, "encodeAwarenessUpdate");
var applyAwarenessUpdate = /* @__PURE__ */ __name((awareness, update, origin) => {
  const decoder = createDecoder(update);
  const timestamp = getUnixTime();
  const added = [];
  const updated = [];
  const filteredUpdated = [];
  const removed = [];
  const len = readVarUint2(decoder);
  for (let i = 0; i < len; i++) {
    const clientID = readVarUint2(decoder);
    let clock = readVarUint2(decoder);
    const state = JSON.parse(readVarString2(decoder));
    const clientMeta = awareness.meta.get(clientID);
    const prevState = awareness.states.get(clientID);
    const currClock = clientMeta === void 0 ? 0 : clientMeta.clock;
    if (currClock < clock || currClock === clock && state === null && awareness.states.has(clientID)) {
      if (state === null) {
        if (clientID === awareness.clientID && awareness.getLocalState() != null) {
          clock++;
        } else {
          awareness.states.delete(clientID);
        }
      } else {
        awareness.states.set(clientID, state);
      }
      awareness.meta.set(clientID, {
        clock,
        lastUpdated: timestamp
      });
      if (clientMeta === void 0 && state !== null) {
        added.push(clientID);
      } else if (clientMeta !== void 0 && state === null) {
        removed.push(clientID);
      } else if (state !== null) {
        if (!equalityDeep(state, prevState)) {
          filteredUpdated.push(clientID);
        }
        updated.push(clientID);
      }
    }
  }
  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {
    awareness.emit("change", [{
      added,
      updated: filteredUpdated,
      removed
    }, origin]);
  }
  if (added.length > 0 || updated.length > 0 || removed.length > 0) {
    awareness.emit("update", [{
      added,
      updated,
      removed
    }, origin]);
  }
}, "applyAwarenessUpdate");
var createMutex = /* @__PURE__ */ __name(() => {
  let token = true;
  return (f, g) => {
    if (token) {
      token = false;
      try {
        f();
      } finally {
        token = true;
      }
    } else if (g !== void 0) {
      g();
    }
  };
}, "createMutex");
var encodeQueryParams = /* @__PURE__ */ __name((params3) => map(params3, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&"), "encodeQueryParams");
var _EventEmitter = class _EventEmitter {
  constructor() {
    this.callbacks = {};
  }
  on(event, fn) {
    if (!this.callbacks[event]) {
      this.callbacks[event] = [];
    }
    this.callbacks[event].push(fn);
    return this;
  }
  emit(event, ...args) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      callbacks.forEach((callback) => callback.apply(this, args));
    }
    return this;
  }
  off(event, fn) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      if (fn) {
        this.callbacks[event] = callbacks.filter((callback) => callback !== fn);
      } else {
        delete this.callbacks[event];
      }
    }
    return this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
};
__name(_EventEmitter, "EventEmitter");
var EventEmitter = _EventEmitter;
var _IncomingMessage = class _IncomingMessage {
  constructor(data) {
    this.data = data;
    this.encoder = createEncoder();
    this.decoder = createDecoder(new Uint8Array(this.data));
  }
  readVarUint() {
    return readVarUint2(this.decoder);
  }
  readVarUint8Array() {
    return readVarUint8Array(this.decoder);
  }
  writeVarUint(type) {
    return writeVarUint2(this.encoder, type);
  }
  writeVarUint8Array(data) {
    return writeVarUint8Array(this.encoder, data);
  }
  length() {
    return length$1(this.encoder);
  }
};
__name(_IncomingMessage, "IncomingMessage");
var IncomingMessage = _IncomingMessage;
var messageYjsSyncStep1 = 0;
var messageYjsSyncStep2 = 1;
var messageYjsUpdate = 2;
var writeSyncStep1 = /* @__PURE__ */ __name((encoder, doc) => {
  writeVarUint2(encoder, messageYjsSyncStep1);
  const sv = encodeStateVector(doc);
  writeVarUint8Array(encoder, sv);
}, "writeSyncStep1");
var writeSyncStep2 = /* @__PURE__ */ __name((encoder, doc, encodedStateVector) => {
  writeVarUint2(encoder, messageYjsSyncStep2);
  writeVarUint8Array(encoder, encodeStateAsUpdate(doc, encodedStateVector));
}, "writeSyncStep2");
var readSyncStep1 = /* @__PURE__ */ __name((decoder, encoder, doc) => writeSyncStep2(encoder, doc, readVarUint8Array(decoder)), "readSyncStep1");
var readSyncStep2 = /* @__PURE__ */ __name((decoder, doc, transactionOrigin) => {
  try {
    applyUpdate(doc, readVarUint8Array(decoder), transactionOrigin);
  } catch (error) {
    console.error("Caught error while handling a Yjs update", error);
  }
}, "readSyncStep2");
var writeUpdate = /* @__PURE__ */ __name((encoder, update) => {
  writeVarUint2(encoder, messageYjsUpdate);
  writeVarUint8Array(encoder, update);
}, "writeUpdate");
var readUpdate = readSyncStep2;
var readSyncMessage = /* @__PURE__ */ __name((decoder, encoder, doc, transactionOrigin) => {
  const messageType = readVarUint2(decoder);
  switch (messageType) {
    case messageYjsSyncStep1:
      readSyncStep1(decoder, encoder, doc);
      break;
    case messageYjsSyncStep2:
      readSyncStep2(decoder, doc, transactionOrigin);
      break;
    case messageYjsUpdate:
      readUpdate(decoder, doc, transactionOrigin);
      break;
    default:
      throw new Error("Unknown message type");
  }
  return messageType;
}, "readSyncMessage");
var MessageType;
(function(MessageType2) {
  MessageType2[MessageType2["Sync"] = 0] = "Sync";
  MessageType2[MessageType2["Awareness"] = 1] = "Awareness";
  MessageType2[MessageType2["Auth"] = 2] = "Auth";
  MessageType2[MessageType2["QueryAwareness"] = 3] = "QueryAwareness";
  MessageType2[MessageType2["Stateless"] = 5] = "Stateless";
})(MessageType || (MessageType = {}));
var WebSocketStatus;
(function(WebSocketStatus2) {
  WebSocketStatus2["Connecting"] = "connecting";
  WebSocketStatus2["Connected"] = "connected";
  WebSocketStatus2["Disconnected"] = "disconnected";
})(WebSocketStatus || (WebSocketStatus = {}));
var _OutgoingMessage = class _OutgoingMessage {
  constructor() {
    this.encoder = createEncoder();
  }
  get(args) {
    return args.encoder;
  }
  toUint8Array() {
    return toUint8Array(this.encoder);
  }
};
__name(_OutgoingMessage, "OutgoingMessage");
var OutgoingMessage = _OutgoingMessage;
var _MessageReceiver = class _MessageReceiver {
  constructor(message) {
    this.broadcasted = false;
    this.message = message;
  }
  setBroadcasted(value) {
    this.broadcasted = value;
    return this;
  }
  apply(provider, emitSynced = true) {
    const { message } = this;
    const type = message.readVarUint();
    switch (type) {
      case MessageType.Sync:
        this.applySyncMessage(provider, emitSynced);
        break;
      case MessageType.Awareness:
        this.applyAwarenessMessage(provider);
        break;
      case MessageType.Auth:
        this.applyAuthMessage(provider);
        break;
      case MessageType.QueryAwareness:
        this.applyQueryAwarenessMessage(provider);
        break;
      case MessageType.Stateless:
        provider.receiveStateless(readVarString2(message.decoder));
        break;
      default:
        throw new Error(`Can’t apply message of unknown type: ${type}`);
    }
    if (message.length() > 1) {
      if (this.broadcasted) {
        provider.broadcast(OutgoingMessage, { encoder: message.encoder });
      } else {
        provider.send(OutgoingMessage, { encoder: message.encoder });
      }
    }
  }
  applySyncMessage(provider, emitSynced) {
    const { message } = this;
    message.writeVarUint(MessageType.Sync);
    const syncMessageType = readSyncMessage(message.decoder, message.encoder, provider.document, provider);
    if (emitSynced && syncMessageType === messageYjsSyncStep2) {
      provider.synced = true;
    }
    if (syncMessageType === messageYjsUpdate || syncMessageType === messageYjsSyncStep2) {
      if (provider.unsyncedChanges > 0) {
        provider.unsyncedChanges -= 1;
      }
    }
  }
  applyAwarenessMessage(provider) {
    const { message } = this;
    applyAwarenessUpdate(provider.awareness, message.readVarUint8Array(), provider);
  }
  applyAuthMessage(provider) {
    const { message } = this;
    readAuthMessage(message.decoder, provider.permissionDeniedHandler.bind(provider), provider.authenticatedHandler.bind(provider));
  }
  applyQueryAwarenessMessage(provider) {
    const { message } = this;
    message.writeVarUint(MessageType.Awareness);
    message.writeVarUint8Array(encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())));
  }
};
__name(_MessageReceiver, "MessageReceiver");
var MessageReceiver = _MessageReceiver;
var _MessageSender = class _MessageSender {
  constructor(Message, args = {}) {
    this.message = new Message();
    this.encoder = this.message.get(args);
  }
  create() {
    return toUint8Array(this.encoder);
  }
  send(webSocket) {
    webSocket === null || webSocket === void 0 ? void 0 : webSocket.send(this.create());
  }
  broadcast(channel) {
    publish(channel, this.create());
  }
};
__name(_MessageSender, "MessageSender");
var MessageSender = _MessageSender;
var _SyncStepOneMessage = class _SyncStepOneMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Sync;
    this.description = "First sync step";
  }
  get(args) {
    if (typeof args.document === "undefined") {
      throw new Error("The sync step one message requires document as an argument");
    }
    writeVarUint2(this.encoder, this.type);
    writeSyncStep1(this.encoder, args.document);
    return this.encoder;
  }
};
__name(_SyncStepOneMessage, "SyncStepOneMessage");
var SyncStepOneMessage = _SyncStepOneMessage;
var _SyncStepTwoMessage = class _SyncStepTwoMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Sync;
    this.description = "Second sync step";
  }
  get(args) {
    if (typeof args.document === "undefined") {
      throw new Error("The sync step two message requires document as an argument");
    }
    writeVarUint2(this.encoder, this.type);
    writeSyncStep2(this.encoder, args.document);
    return this.encoder;
  }
};
__name(_SyncStepTwoMessage, "SyncStepTwoMessage");
var SyncStepTwoMessage = _SyncStepTwoMessage;
var _QueryAwarenessMessage = class _QueryAwarenessMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.QueryAwareness;
    this.description = "Queries awareness states";
  }
  get(args) {
    writeVarUint2(this.encoder, this.type);
    return this.encoder;
  }
};
__name(_QueryAwarenessMessage, "QueryAwarenessMessage");
var QueryAwarenessMessage = _QueryAwarenessMessage;
var _AuthenticationMessage = class _AuthenticationMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Auth;
    this.description = "Authentication";
  }
  get(args) {
    if (typeof args.token === "undefined") {
      throw new Error("The authentication message requires `token` as an argument.");
    }
    writeVarUint2(this.encoder, this.type);
    writeAuthentication(this.encoder, args.token);
    return this.encoder;
  }
};
__name(_AuthenticationMessage, "AuthenticationMessage");
var AuthenticationMessage = _AuthenticationMessage;
var _AwarenessMessage = class _AwarenessMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Awareness;
    this.description = "Awareness states update";
  }
  get(args) {
    if (typeof args.awareness === "undefined") {
      throw new Error("The awareness message requires awareness as an argument");
    }
    if (typeof args.clients === "undefined") {
      throw new Error("The awareness message requires clients as an argument");
    }
    writeVarUint2(this.encoder, this.type);
    let awarenessUpdate;
    if (args.states === void 0) {
      awarenessUpdate = encodeAwarenessUpdate(args.awareness, args.clients);
    } else {
      awarenessUpdate = encodeAwarenessUpdate(args.awareness, args.clients, args.states);
    }
    writeVarUint8Array(this.encoder, awarenessUpdate);
    return this.encoder;
  }
};
__name(_AwarenessMessage, "AwarenessMessage");
var AwarenessMessage = _AwarenessMessage;
var _UpdateMessage = class _UpdateMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Sync;
    this.description = "A document update";
  }
  get(args) {
    writeVarUint2(this.encoder, this.type);
    writeUpdate(this.encoder, args.update);
    return this.encoder;
  }
};
__name(_UpdateMessage, "UpdateMessage");
var UpdateMessage = _UpdateMessage;
var _StatelessMessage = class _StatelessMessage extends OutgoingMessage {
  constructor() {
    super(...arguments);
    this.type = MessageType.Stateless;
    this.description = "A stateless message";
  }
  get(args) {
    var _a;
    writeVarUint2(this.encoder, this.type);
    writeVarString2(this.encoder, (_a = args.payload) !== null && _a !== void 0 ? _a : "");
    return this.encoder;
  }
};
__name(_StatelessMessage, "StatelessMessage");
var StatelessMessage = _StatelessMessage;
var _HocuspocusProvider = class _HocuspocusProvider extends EventEmitter {
  constructor(configuration) {
    super();
    this.configuration = {
      name: "",
      url: "",
      // @ts-ignore
      document: void 0,
      // @ts-ignore
      awareness: void 0,
      WebSocketPolyfill: void 0,
      token: null,
      parameters: {},
      connect: true,
      broadcast: true,
      forceSyncInterval: false,
      // TODO: this should depend on awareness.outdatedTime
      messageReconnectTimeout: 3e4,
      // 1 second
      delay: 1e3,
      // instant
      initialDelay: 0,
      // double the delay each time
      factor: 2,
      // unlimited retries
      maxAttempts: 0,
      // wait at least 1 second
      minDelay: 1e3,
      // at least every 30 seconds
      maxDelay: 3e4,
      // randomize
      jitter: true,
      // retry forever
      timeout: 0,
      onAuthenticated: /* @__PURE__ */ __name(() => null, "onAuthenticated"),
      onAuthenticationFailed: /* @__PURE__ */ __name(() => null, "onAuthenticationFailed"),
      onOpen: /* @__PURE__ */ __name(() => null, "onOpen"),
      onConnect: /* @__PURE__ */ __name(() => null, "onConnect"),
      onMessage: /* @__PURE__ */ __name(() => null, "onMessage"),
      onOutgoingMessage: /* @__PURE__ */ __name(() => null, "onOutgoingMessage"),
      onStatus: /* @__PURE__ */ __name(() => null, "onStatus"),
      onSynced: /* @__PURE__ */ __name(() => null, "onSynced"),
      onDisconnect: /* @__PURE__ */ __name(() => null, "onDisconnect"),
      onClose: /* @__PURE__ */ __name(() => null, "onClose"),
      onDestroy: /* @__PURE__ */ __name(() => null, "onDestroy"),
      onAwarenessUpdate: /* @__PURE__ */ __name(() => null, "onAwarenessUpdate"),
      onAwarenessChange: /* @__PURE__ */ __name(() => null, "onAwarenessChange"),
      onStateless: /* @__PURE__ */ __name(() => null, "onStateless"),
      quiet: false
    };
    this.subscribedToBroadcastChannel = false;
    this.webSocket = null;
    this.shouldConnect = true;
    this.status = WebSocketStatus.Disconnected;
    this.isSynced = false;
    this.unsyncedChanges = 0;
    this.isAuthenticated = false;
    this.lastMessageReceived = 0;
    this.mux = createMutex();
    this.intervals = {
      forceSync: null,
      connectionChecker: null
    };
    this.connectionAttempt = null;
    this.boundConnect = this.connect.bind(this);
    this.boundBeforeUnload = this.beforeUnload.bind(this);
    this.boundBroadcastChannelSubscriber = this.broadcastChannelSubscriber.bind(this);
    this.setConfiguration(configuration);
    this.configuration.document = configuration.document ? configuration.document : new Doc();
    this.configuration.awareness = configuration.awareness ? configuration.awareness : new Awareness(this.document);
    this.configuration.WebSocketPolyfill = configuration.WebSocketPolyfill ? configuration.WebSocketPolyfill : WebSocket;
    this.on("open", this.configuration.onOpen);
    this.on("authenticated", this.configuration.onAuthenticated);
    this.on("authenticationFailed", this.configuration.onAuthenticationFailed);
    this.on("connect", this.configuration.onConnect);
    this.on("message", this.configuration.onMessage);
    this.on("outgoingMessage", this.configuration.onOutgoingMessage);
    this.on("synced", this.configuration.onSynced);
    this.on("status", this.configuration.onStatus);
    this.on("disconnect", this.configuration.onDisconnect);
    this.on("close", this.configuration.onClose);
    this.on("destroy", this.configuration.onDestroy);
    this.on("awarenessUpdate", this.configuration.onAwarenessUpdate);
    this.on("awarenessChange", this.configuration.onAwarenessChange);
    this.on("stateless", this.configuration.onStateless);
    this.awareness.on("update", () => {
      this.emit("awarenessUpdate", { states: awarenessStatesToArray(this.awareness.getStates()) });
    });
    this.awareness.on("change", () => {
      this.emit("awarenessChange", { states: awarenessStatesToArray(this.awareness.getStates()) });
    });
    this.document.on("update", this.documentUpdateHandler.bind(this));
    this.awareness.on("update", this.awarenessUpdateHandler.bind(this));
    this.registerEventListeners();
    this.intervals.connectionChecker = setInterval(this.checkConnection.bind(this), this.configuration.messageReconnectTimeout / 10);
    if (this.configuration.forceSyncInterval) {
      this.intervals.forceSync = setInterval(this.forceSync.bind(this), this.configuration.forceSyncInterval);
    }
    if (typeof configuration.connect !== "undefined") {
      this.shouldConnect = configuration.connect;
    }
    if (!this.shouldConnect) {
      return;
    }
    this.connect();
  }
  setConfiguration(configuration = {}) {
    this.configuration = { ...this.configuration, ...configuration };
  }
  async connect() {
    if (this.status === WebSocketStatus.Connected) {
      return;
    }
    if (this.cancelWebsocketRetry) {
      this.cancelWebsocketRetry();
      this.cancelWebsocketRetry = void 0;
    }
    this.unsyncedChanges = 0;
    this.shouldConnect = true;
    this.subscribeToBroadcastChannel();
    const abortableRetry = /* @__PURE__ */ __name(() => {
      let cancelAttempt = false;
      const retryPromise2 = retry(this.createWebSocketConnection.bind(this), {
        delay: this.configuration.delay,
        initialDelay: this.configuration.initialDelay,
        factor: this.configuration.factor,
        maxAttempts: this.configuration.maxAttempts,
        minDelay: this.configuration.minDelay,
        maxDelay: this.configuration.maxDelay,
        jitter: this.configuration.jitter,
        timeout: this.configuration.timeout,
        beforeAttempt: /* @__PURE__ */ __name((context) => {
          if (!this.shouldConnect || cancelAttempt) {
            context.abort();
          }
        }, "beforeAttempt")
      }).catch((error) => {
        if (error && error.code !== "ATTEMPT_ABORTED") {
          throw error;
        }
      });
      return {
        retryPromise: retryPromise2,
        cancelFunc: /* @__PURE__ */ __name(() => {
          cancelAttempt = true;
        }, "cancelFunc")
      };
    }, "abortableRetry");
    const { retryPromise, cancelFunc } = abortableRetry();
    this.cancelWebsocketRetry = cancelFunc;
    return retryPromise;
  }
  createWebSocketConnection() {
    return new Promise((resolve, reject) => {
      if (this.webSocket) {
        this.webSocket.close();
        this.webSocket = null;
      }
      const ws = new this.configuration.WebSocketPolyfill(this.url);
      ws.binaryType = "arraybuffer";
      ws.onmessage = this.onMessage.bind(this);
      ws.onclose = this.onClose.bind(this);
      ws.onopen = this.onOpen.bind(this);
      ws.onerror = (err) => {
        reject(err);
      };
      this.webSocket = ws;
      this.synced = false;
      this.status = WebSocketStatus.Connecting;
      this.emit("status", { status: WebSocketStatus.Connecting });
      this.connectionAttempt = {
        resolve,
        reject
      };
    });
  }
  resolveConnectionAttempt() {
    var _a;
    (_a = this.connectionAttempt) === null || _a === void 0 ? void 0 : _a.resolve();
    this.connectionAttempt = null;
    this.status = WebSocketStatus.Connected;
    this.emit("status", { status: WebSocketStatus.Connected });
    this.emit("connect");
  }
  stopConnectionAttempt() {
    this.connectionAttempt = null;
  }
  rejectConnectionAttempt() {
    var _a;
    (_a = this.connectionAttempt) === null || _a === void 0 ? void 0 : _a.reject();
    this.connectionAttempt = null;
  }
  get document() {
    return this.configuration.document;
  }
  get awareness() {
    return this.configuration.awareness;
  }
  get hasUnsyncedChanges() {
    return this.unsyncedChanges > 0;
  }
  checkConnection() {
    var _a;
    if (this.status !== WebSocketStatus.Connected) {
      return;
    }
    if (!this.lastMessageReceived) {
      return;
    }
    if (this.configuration.messageReconnectTimeout >= getUnixTime() - this.lastMessageReceived) {
      return;
    }
    (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.close();
  }
  forceSync() {
    if (!this.webSocket) {
      return;
    }
    this.send(SyncStepOneMessage, { document: this.document });
  }
  beforeUnload() {
    removeAwarenessStates(this.awareness, [this.document.clientID], "window unload");
  }
  registerEventListeners() {
    if (typeof window === "undefined") {
      return;
    }
    window.addEventListener("online", this.boundConnect);
    window.addEventListener("beforeunload", this.boundBeforeUnload);
  }
  sendStateless(payload) {
    this.send(StatelessMessage, { payload });
  }
  documentUpdateHandler(update, origin) {
    if (origin === this) {
      return;
    }
    this.unsyncedChanges += 1;
    this.send(UpdateMessage, { update }, true);
  }
  awarenessUpdateHandler({ added, updated, removed }, origin) {
    const changedClients = added.concat(updated).concat(removed);
    this.send(AwarenessMessage, {
      awareness: this.awareness,
      clients: changedClients
    }, true);
  }
  permissionDeniedHandler(reason) {
    this.emit("authenticationFailed", { reason });
    this.isAuthenticated = false;
    this.shouldConnect = false;
  }
  authenticatedHandler() {
    this.isAuthenticated = true;
    this.emit("authenticated");
    this.startSync();
  }
  // Ensure that the URL always ends with /
  get serverUrl() {
    while (this.configuration.url[this.configuration.url.length - 1] === "/") {
      return this.configuration.url.slice(0, this.configuration.url.length - 1);
    }
    return this.configuration.url;
  }
  get url() {
    const encodedParams = encodeQueryParams(this.configuration.parameters);
    return `${this.serverUrl}/${this.configuration.name}${encodedParams.length === 0 ? "" : `?${encodedParams}`}`;
  }
  get synced() {
    return this.isSynced;
  }
  set synced(state) {
    if (this.isSynced === state) {
      return;
    }
    this.isSynced = state;
    this.emit("synced", { state });
    this.emit("sync", { state });
  }
  receiveStateless(payload) {
    this.emit("stateless", { payload });
  }
  get isAuthenticationRequired() {
    return !!this.configuration.token && !this.isAuthenticated;
  }
  disconnect() {
    this.shouldConnect = false;
    this.disconnectBroadcastChannel();
    if (this.webSocket === null) {
      return;
    }
    try {
      this.webSocket.close();
    } catch {
    }
  }
  async onOpen(event) {
    this.emit("open", { event });
    if (this.isAuthenticationRequired) {
      this.send(AuthenticationMessage, {
        token: await this.getToken()
      });
      return;
    }
    this.startSync();
  }
  async getToken() {
    if (typeof this.configuration.token === "function") {
      const token = await this.configuration.token();
      return token;
    }
    return this.configuration.token;
  }
  startSync() {
    this.send(SyncStepOneMessage, { document: this.document });
    if (this.awareness.getLocalState() !== null) {
      this.send(AwarenessMessage, {
        awareness: this.awareness,
        clients: [this.document.clientID]
      });
    }
  }
  send(Message, args, broadcast = false) {
    var _a;
    if (broadcast) {
      this.mux(() => {
        this.broadcast(Message, args);
      });
    }
    if (((_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.readyState) === WsReadyStates.Open) {
      const messageSender = new MessageSender(Message, args);
      this.emit("outgoingMessage", { message: messageSender.message });
      messageSender.send(this.webSocket);
    }
  }
  onMessage(event) {
    this.resolveConnectionAttempt();
    this.lastMessageReceived = getUnixTime();
    const message = new IncomingMessage(event.data);
    this.emit("message", { event, message });
    new MessageReceiver(message).apply(this);
  }
  onClose(event) {
    this.emit("close", { event });
    this.webSocket = null;
    this.isAuthenticated = false;
    this.synced = false;
    if (this.status === WebSocketStatus.Connected) {
      removeAwarenessStates(this.awareness, Array.from(this.awareness.getStates().keys()).filter((client) => client !== this.document.clientID), this);
      this.status = WebSocketStatus.Disconnected;
      this.emit("status", { status: WebSocketStatus.Disconnected });
      this.emit("disconnect", { event });
    }
    if (event.code === Unauthorized.code) {
      if (!this.configuration.quiet) {
        if (event.reason === Unauthorized.reason) {
          console.warn("[HocuspocusProvider] An authentication token is required, but you didn’t send one. Try adding a `token` to your HocuspocusProvider configuration. Won’t try again.");
        } else {
          console.warn(`[HocuspocusProvider] Connection closed with status Unauthorized: ${event.reason}`);
        }
      }
      this.shouldConnect = false;
    }
    if (event.code === Forbidden.code) {
      if (!this.configuration.quiet) {
        console.warn("[HocuspocusProvider] The provided authentication token isn’t allowed to connect to this server. Will try again.");
      }
    }
    if (this.connectionAttempt) {
      this.rejectConnectionAttempt();
    } else if (this.shouldConnect) {
      this.connect();
    }
    if (this.shouldConnect) {
      return;
    }
    if (this.status === WebSocketStatus.Disconnected) {
      return;
    }
    this.status = WebSocketStatus.Disconnected;
    this.emit("status", { status: WebSocketStatus.Disconnected });
    this.emit("disconnect", { event });
  }
  destroy() {
    this.emit("destroy");
    if (this.intervals.forceSync) {
      clearInterval(this.intervals.forceSync);
    }
    clearInterval(this.intervals.connectionChecker);
    removeAwarenessStates(this.awareness, [this.document.clientID], "provider destroy");
    this.stopConnectionAttempt();
    this.disconnect();
    this.awareness.off("update", this.awarenessUpdateHandler);
    this.document.off("update", this.documentUpdateHandler);
    this.removeAllListeners();
    if (typeof window === "undefined") {
      return;
    }
    window.removeEventListener("online", this.boundConnect);
    window.removeEventListener("beforeunload", this.boundBeforeUnload);
  }
  get broadcastChannel() {
    return `${this.serverUrl}/${this.configuration.name}`;
  }
  broadcastChannelSubscriber(data) {
    this.mux(() => {
      const message = new IncomingMessage(data);
      new MessageReceiver(message).setBroadcasted(true).apply(this, false);
    });
  }
  subscribeToBroadcastChannel() {
    if (!this.subscribedToBroadcastChannel) {
      subscribe(this.broadcastChannel, this.boundBroadcastChannelSubscriber);
      this.subscribedToBroadcastChannel = true;
    }
    this.mux(() => {
      this.broadcast(SyncStepOneMessage, { document: this.document });
      this.broadcast(SyncStepTwoMessage, { document: this.document });
      this.broadcast(QueryAwarenessMessage);
      this.broadcast(AwarenessMessage, { awareness: this.awareness, clients: [this.document.clientID] });
    });
  }
  disconnectBroadcastChannel() {
    this.send(AwarenessMessage, {
      awareness: this.awareness,
      clients: [this.document.clientID],
      states: /* @__PURE__ */ new Map()
    }, true);
    if (this.subscribedToBroadcastChannel) {
      unsubscribe(this.broadcastChannel, this.boundBroadcastChannelSubscriber);
      this.subscribedToBroadcastChannel = false;
    }
  }
  broadcast(Message, args) {
    if (!this.configuration.broadcast) {
      return;
    }
    if (!this.subscribedToBroadcastChannel) {
      return;
    }
    new MessageSender(Message, args).broadcast(this.broadcastChannel);
  }
  setAwarenessField(key, value) {
    this.awareness.setLocalStateField(key, value);
  }
};
__name(_HocuspocusProvider, "HocuspocusProvider");
var HocuspocusProvider = _HocuspocusProvider;
var _TiptapCollabProvider = class _TiptapCollabProvider extends HocuspocusProvider {
  constructor(configuration) {
    if (!configuration.url) {
      configuration.url = `wss://${configuration.appId}.tt-collab.de`;
    }
    super(configuration);
  }
};
__name(_TiptapCollabProvider, "TiptapCollabProvider");
var TiptapCollabProvider = _TiptapCollabProvider;
export {
  HocuspocusProvider,
  MessageType,
  TiptapCollabProvider,
  WebSocketStatus
};
//# sourceMappingURL=@hocuspocus_provider.js.map
