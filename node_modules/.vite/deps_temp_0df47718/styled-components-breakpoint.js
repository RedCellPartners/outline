import {
  Ae,
  init_styled_components_browser_esm
} from "./chunk-UNQ36ARK.js";
import "./chunk-VVBESN4C.js";
import "./chunk-QQLE6DLA.js";
import "./chunk-ODIEF2BS.js";
import "./chunk-NSZELEHI.js";
import {
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/styled-components-breakpoint/dist/esm/core.js
init_styled_components_browser_esm();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _templateObject = _taggedTemplateLiteral(["@media (", ": ", "em) {\n      ", "\n    }"], ["@media (", ": ", "em) {\n      ", "\n    }"]);
var _templateObject2 = _taggedTemplateLiteral(["@media (min-width: ", "em) and (max-width: ", "em) {\n      ", "\n    }"], ["@media (min-width: ", "em) and (max-width: ", "em) {\n      ", "\n    }"]);
function _taggedTemplateLiteral(strings, raw) {
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
__name(_taggedTemplateLiteral, "_taggedTemplateLiteral");
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
__name(_toConsumableArray, "_toConsumableArray");
function convertPxToEm(pixels) {
  return pixels / 16;
}
__name(convertPxToEm, "convertPxToEm");
function getValueFromName(breakpoints, name) {
  var value = breakpoints[name];
  if (typeof value === "undefined") {
    console.error('A breakpoint named "' + name + '" does not exist.');
    return 0;
  }
  return value;
}
__name(getValueFromName, "getValueFromName");
function withSingleCriteria(breakpoints, name, operator) {
  var offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  var value = getValueFromName(breakpoints, name);
  if (operator === "min-width" && value === 0) {
    return function(strings) {
      for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      return Ae.apply(void 0, [strings].concat(_toConsumableArray(interpolations)));
    };
  }
  return function(strings) {
    for (var _len2 = arguments.length, interpolations = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      interpolations[_key2 - 1] = arguments[_key2];
    }
    return Ae(_templateObject, operator, convertPxToEm(value + offset), Ae.apply(void 0, [strings].concat(_toConsumableArray(interpolations))));
  };
}
__name(withSingleCriteria, "withSingleCriteria");
function _gte(breakpoints, name) {
  return withSingleCriteria(breakpoints, name, "min-width");
}
__name(_gte, "_gte");
function _between(breakpoints, gte, lt) {
  var gteValue = getValueFromName(breakpoints, gte);
  var ltValue = getValueFromName(breakpoints, lt);
  return function(strings) {
    for (var _len3 = arguments.length, interpolations = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      interpolations[_key3 - 1] = arguments[_key3];
    }
    return Ae(_templateObject2, convertPxToEm(gteValue), convertPxToEm(ltValue - 1), Ae.apply(void 0, [strings].concat(_toConsumableArray(interpolations))));
  };
}
__name(_between, "_between");
function _breakpoint(breakpoints, gte, lt) {
  if (typeof lt === "undefined") {
    return _gte(breakpoints, gte);
  } else {
    return _between(breakpoints, gte, lt);
  }
}
__name(_breakpoint, "_breakpoint");
function _map(breakpoints, value, mapValueToCSS) {
  var values = value;
  if (values === null || (typeof values === "undefined" ? "undefined" : _typeof(values)) !== "object") {
    return mapValueToCSS(values);
  }
  return [
    // eslint-disable-next-line no-undefined
    mapValueToCSS(void 0)
  ].concat(_toConsumableArray(Object.keys(values).map(function(name) {
    var tag = _gte(breakpoints, name);
    var val = values[name];
    var styles = tag([], [].concat(mapValueToCSS(val)));
    return styles;
  })));
}
__name(_map, "_map");

// node_modules/styled-components-breakpoint/dist/esm/index.js
function _toConsumableArray2(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
__name(_toConsumableArray2, "_toConsumableArray");
var defaultBreakpoints = {
  mobile: 0,
  // targeting all devices
  tablet: 737,
  // targeting devices that are LARGER than the iPhone 6 Plus (which is 736px in landscape mode)
  desktop: 1025
  // targeting devices that are LARGER than the iPad (which is 1024px in landscape mode)
};
function breakpoint(gte, lt) {
  return function(strings) {
    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      interpolations[_key - 1] = arguments[_key];
    }
    return function(_ref) {
      var _ref$theme = _ref.theme, theme = _ref$theme === void 0 ? {} : _ref$theme;
      return _breakpoint(theme.breakpoints || defaultBreakpoints, gte, lt).apply(void 0, [strings].concat(_toConsumableArray2(interpolations)));
    };
  };
}
__name(breakpoint, "breakpoint");
function map(value, mapValueToCSS) {
  return function(_ref2) {
    var _ref2$theme = _ref2.theme, theme = _ref2$theme === void 0 ? {} : _ref2$theme;
    return _map(theme.breakpoints || defaultBreakpoints, value, mapValueToCSS);
  };
}
__name(map, "map");
function createStatic() {
  var breakpoints = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultBreakpoints;
  return Object.keys(breakpoints).reduce(function(accum, name) {
    accum[name] = _breakpoint(breakpoints, name);
    return accum;
  }, {
    breakpoint: /* @__PURE__ */ __name(function breakpoint2(gte, lt) {
      return _breakpoint(breakpoints, gte, lt);
    }, "breakpoint"),
    map: /* @__PURE__ */ __name(function map2(value, mapValueToCSS) {
      return _map(breakpoints, value, mapValueToCSS);
    }, "map")
  });
}
__name(createStatic, "createStatic");
var esm_default = breakpoint;
export {
  createStatic,
  esm_default as default,
  map
};
//# sourceMappingURL=styled-components-breakpoint.js.map
