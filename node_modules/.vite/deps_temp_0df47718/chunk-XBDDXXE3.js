import {
  __commonJS,
  __name
} from "./chunk-4OCRLPSA.js";

// node_modules/command-score/index.js
var require_command_score = __commonJS({
  "node_modules/command-score/index.js"(exports, module) {
    var SCORE_CONTINUE_MATCH = 1;
    var SCORE_WORD_JUMP = 0.9;
    var SCORE_CHARACTER_JUMP = 0.3;
    var SCORE_TRANSPOSITION = 0.1;
    var SCORE_LONG_JUMP = 0;
    var PENALTY_SKIPPED = 0.999;
    var PENALTY_CASE_MISMATCH = 0.9999;
    var PENALTY_NOT_COMPLETE = 0.99;
    var IS_GAP_REGEXP = /[\\\/\-_+.# \t"@\[\(\{&]/;
    var COUNT_GAPS_REGEXP = /[\\\/\-_+.# \t"@\[\(\{&]/g;
    function commandScoreInner(string, abbreviation, lowerString, lowerAbbreviation, stringIndex, abbreviationIndex) {
      if (abbreviationIndex === abbreviation.length) {
        if (stringIndex === string.length) {
          return SCORE_CONTINUE_MATCH;
        }
        return PENALTY_NOT_COMPLETE;
      }
      var abbreviationChar = lowerAbbreviation.charAt(abbreviationIndex);
      var index = lowerString.indexOf(abbreviationChar, stringIndex);
      var highScore = 0;
      var score, transposedScore, wordBreaks;
      while (index >= 0) {
        score = commandScoreInner(string, abbreviation, lowerString, lowerAbbreviation, index + 1, abbreviationIndex + 1);
        if (score > highScore) {
          if (index === stringIndex) {
            score *= SCORE_CONTINUE_MATCH;
          } else if (IS_GAP_REGEXP.test(string.charAt(index - 1))) {
            score *= SCORE_WORD_JUMP;
            wordBreaks = string.slice(stringIndex, index - 1).match(COUNT_GAPS_REGEXP);
            if (wordBreaks && stringIndex > 0) {
              score *= Math.pow(PENALTY_SKIPPED, wordBreaks.length);
            }
          } else if (IS_GAP_REGEXP.test(string.slice(stringIndex, index - 1))) {
            score *= SCORE_LONG_JUMP;
            if (stringIndex > 0) {
              score *= Math.pow(PENALTY_SKIPPED, index - stringIndex);
            }
          } else {
            score *= SCORE_CHARACTER_JUMP;
            if (stringIndex > 0) {
              score *= Math.pow(PENALTY_SKIPPED, index - stringIndex);
            }
          }
          if (string.charAt(index) !== abbreviation.charAt(abbreviationIndex)) {
            score *= PENALTY_CASE_MISMATCH;
          }
        }
        if (score < SCORE_TRANSPOSITION && lowerString.charAt(index - 1) === lowerAbbreviation.charAt(abbreviationIndex + 1) && lowerString.charAt(index - 1) !== lowerAbbreviation.charAt(abbreviationIndex)) {
          transposedScore = commandScoreInner(string, abbreviation, lowerString, lowerAbbreviation, index + 1, abbreviationIndex + 2);
          if (transposedScore * SCORE_TRANSPOSITION > score) {
            score = transposedScore * SCORE_TRANSPOSITION;
          }
        }
        if (score > highScore) {
          highScore = score;
        }
        index = lowerString.indexOf(abbreviationChar, index + 1);
      }
      return highScore;
    }
    __name(commandScoreInner, "commandScoreInner");
    function commandScore(string, abbreviation) {
      return commandScoreInner(string, abbreviation, string.toLowerCase(), abbreviation.toLowerCase(), 0, 0);
    }
    __name(commandScore, "commandScore");
    module.exports = commandScore;
  }
});

export {
  require_command_score
};
//# sourceMappingURL=chunk-XBDDXXE3.js.map
