{
  "version": 3,
  "sources": ["../../natural-sort/dist/natural-sort.js"],
  "sourcesContent": ["/*!\n * natural-sort.js\n * ===============\n * Sorting with support for numbers, dates, unicode and more.\n *\n * http://github.com/studio-b12/natural-sort\n * MIT License, Â© Studio B12 GmbH 2014\n *\n *//*\n *\n * Idea by Dave Koelle\n * Original implementation by Jim Palmer\n * Modified by Tomek Wiszniewski\n *\n */\n\nvar naturalSort = function naturalSort (options) { 'use strict';\n  if (!options) options = {};\n\n  return function(a, b) {\n    var EQUAL = 0;\n    var GREATER = (options.direction == 'desc' ?\n      -1 :\n      1\n    );\n    var SMALLER = -GREATER;\n\n    var re = /(^-?[0-9]+(\\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi;\n    var sre = /(^[ ]*|[ ]*$)/g;\n    var dre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/;\n    var hre = /^0x[0-9a-f]+$/i;\n    var ore = /^0/;\n\n    var normalize = function normalize (value) {\n      var string = '' + value;\n      return (options.caseSensitive ?\n        string :\n        string.toLowerCase()\n      );\n    };\n\n    // Normalize values to strings\n    var x = normalize(a).replace(sre, '') || '';\n    var y = normalize(b).replace(sre, '') || '';\n\n    // chunk/tokenize\n    var xN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0');\n    var yN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0');\n\n    // Return immediately if at least one of the values is empty.\n    if (!x && !y) return EQUAL;\n    if (!x &&  y) return GREATER;\n    if ( x && !y) return SMALLER;\n\n    // numeric, hex or date detection\n    var xD = parseInt(x.match(hre)) || (xN.length != 1 && x.match(dre) && Date.parse(x));\n    var yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null;\n    var oFxNcL, oFyNcL;\n\n    // first try and sort Hex codes or Dates\n    if (yD) {\n      if ( xD < yD ) return SMALLER;\n      else if ( xD > yD ) return GREATER;\n    }\n\n    // natural sorting through split numeric strings and default strings\n    for (var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n\n      // find floats not starting with '0', string or 0 if not defined (Clint Priest)\n      oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\n      oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\n\n      // handle numeric vs string comparison - number < string - (Kyle Adams)\n      if (isNaN(oFxNcL) !== isNaN(oFyNcL)) return (isNaN(oFxNcL)) ? GREATER : SMALLER;\n\n      // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n      else if (typeof oFxNcL !== typeof oFyNcL) {\n        oFxNcL += '';\n        oFyNcL += '';\n      }\n\n      if (oFxNcL < oFyNcL) return SMALLER;\n      if (oFxNcL > oFyNcL) return GREATER;\n    }\n\n    return EQUAL;\n  };\n};\n\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.naturalSort = factory();\n  }\n}(this, function () {\n\n  return naturalSort;\n\n}));\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAgBA,QAAI,cAAc,gCAASA,aAAa,SAAS;AAAE;AACjD,UAAI,CAAC,QAAS,WAAU,CAAC;AAEzB,aAAO,SAAS,GAAG,GAAG;AACpB,YAAI,QAAQ;AACZ,YAAI,UAAW,QAAQ,aAAa,SAClC,KACA;AAEF,YAAI,UAAU,CAAC;AAEf,YAAI,KAAK;AACT,YAAI,MAAM;AACV,YAAI,MAAM;AACV,YAAI,MAAM;AACV,YAAI,MAAM;AAEV,YAAI,YAAY,gCAASC,WAAW,OAAO;AACzC,cAAI,SAAS,KAAK;AAClB,iBAAQ,QAAQ,gBACd,SACA,OAAO,YAAY;AAAA,QAEvB,GANgB;AAShB,YAAI,IAAI,UAAU,CAAC,EAAE,QAAQ,KAAK,EAAE,KAAK;AACzC,YAAI,IAAI,UAAU,CAAC,EAAE,QAAQ,KAAK,EAAE,KAAK;AAGzC,YAAI,KAAK,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,OAAM,EAAE,EAAE,QAAQ,OAAM,EAAE,EAAE,MAAM,IAAI;AAC/E,YAAI,KAAK,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,OAAM,EAAE,EAAE,QAAQ,OAAM,EAAE,EAAE,MAAM,IAAI;AAG/E,YAAI,CAAC,KAAK,CAAC,EAAG,QAAO;AACrB,YAAI,CAAC,KAAM,EAAG,QAAO;AACrB,YAAK,KAAK,CAAC,EAAG,QAAO;AAGrB,YAAI,KAAK,SAAS,EAAE,MAAM,GAAG,CAAC,KAAM,GAAG,UAAU,KAAK,EAAE,MAAM,GAAG,KAAK,KAAK,MAAM,CAAC;AAClF,YAAI,KAAK,SAAS,EAAE,MAAM,GAAG,CAAC,KAAK,MAAM,EAAE,MAAM,GAAG,KAAK,KAAK,MAAM,CAAC,KAAK;AAC1E,YAAI,QAAQ;AAGZ,YAAI,IAAI;AACN,cAAK,KAAK,GAAK,QAAO;AAAA,mBACZ,KAAK,GAAK,QAAO;AAAA,QAC7B;AAGA,iBAAS,OAAK,GAAG,OAAK,KAAK,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,OAAO,MAAM,QAAQ;AAGzE,mBAAS,EAAE,GAAG,IAAI,KAAK,IAAI,MAAM,GAAG,KAAK,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK;AAC7E,mBAAS,EAAE,GAAG,IAAI,KAAK,IAAI,MAAM,GAAG,KAAK,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK;AAG7E,cAAI,MAAM,MAAM,MAAM,MAAM,MAAM,EAAG,QAAQ,MAAM,MAAM,IAAK,UAAU;AAAA,mBAG/D,OAAO,WAAW,OAAO,QAAQ;AACxC,sBAAU;AACV,sBAAU;AAAA,UACZ;AAEA,cAAI,SAAS,OAAQ,QAAO;AAC5B,cAAI,SAAS,OAAQ,QAAO;AAAA,QAC9B;AAEA,eAAO;AAAA,MACT;AAAA,IACF,GAvEkB;AAyElB,KAAC,SAAU,MAAM,SAAS;AACxB,UAAI,OAAO,YAAY,UAAU;AAC/B,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AACL,aAAK,cAAc,QAAQ;AAAA,MAC7B;AAAA,IACF,GAAE,SAAM,WAAY;AAElB,aAAO;AAAA,IAET,CAAC;AAAA;AAAA;",
  "names": ["naturalSort", "normalize"]
}
