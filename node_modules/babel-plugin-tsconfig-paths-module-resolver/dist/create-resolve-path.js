"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResolvePath = createResolvePath;

var _path = _interopRequireDefault(require("path"));

var _tsconfigPaths = require("tsconfig-paths");

var _babelPluginModuleResolver = require("babel-plugin-module-resolver");

var _defaultExtensions = require("./default-extensions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createResolvePath() {
  const configLoaderResult = (0, _tsconfigPaths.loadConfig)();
  const matchPath = configLoaderResult.resultType === 'success' && (0, _tsconfigPaths.createMatchPath)(configLoaderResult.absoluteBaseUrl, configLoaderResult.paths);
  return function resolvePath(sourcePath, currentFile, opts) {
    const fallbackResolvePath = opts._fromNested ? _babelPluginModuleResolver.resolvePath : opts.resolvePath || _babelPluginModuleResolver.resolvePath;
    const extensions = opts.extensions || _defaultExtensions.defaultExtensions;
    const nextOpts = { ...opts,
      _fromNested: true
    };

    if (!matchPath) {
      if (opts.logLevel !== 'silent') {
        console.warn(`Failed to load tsconfig-paths: ${configLoaderResult.resultType === 'failed' ? configLoaderResult.message : 'Failed to create matchPath function. Please open an issue.'}`);
      }

      return fallbackResolvePath(sourcePath, currentFile, nextOpts);
    }

    const matchPathResult = matchPath(sourcePath, undefined, undefined, extensions);

    if (matchPathResult) {
      const relativePath = _path.default.relative(_path.default.dirname(currentFile), matchPathResult);

      return relativePath.startsWith('./') ? relativePath : `./${relativePath}`;
    }

    return fallbackResolvePath(sourcePath, currentFile, nextOpts);
  };
}